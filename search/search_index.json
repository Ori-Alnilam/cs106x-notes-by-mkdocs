{"config":{"lang":["en"],"separator":"[\\s\\u200b\\u3000\\-\u3001\u3002\uff0c\uff0e\uff1f\uff01\uff1b]+","pipeline":["stemmer"]},"docs":[{"location":"","title":"CS106X \u5b66\u4e60\u7b14\u8bb0 \ud83c\udf40","text":"<p>\u8fd9\u662f\u6211\u6574\u7406\u7684 CS106X \u8bfe\u7a0b\u7b14\u8bb0\uff0c\u5305\u62ec\u6240\u6709\u4f5c\u4e1a\u548c\u8bb2\u5ea7\u7b14\u8bb0\u3002</p> <p>\u70b9\u51fb\u5de6\u4fa7\u6216\u4e0b\u65b9\u76ee\u5f55\u67e5\u770b\u6bcf\u4e00\u7ae0\u5185\u5bb9 \ud83d\udcda</p> <ul> <li>Assignment 0</li> <li>Functions</li> <li>Strings</li> <li>Assignment 1</li> <li>Vector</li> <li>Stacks and Queues</li> <li>Sets and Maps</li> <li>Assignment 2</li> <li>Recursion</li> <li>Assignment 3</li> <li>Backtracking</li> <li>Assignment 4</li> <li>Linked Lists</li> <li>Classes</li> <li>Arrays</li> <li>Assignment 5</li> <li>Trees</li> <li>Assignment 6</li> <li>Graphs</li> <li>Inheritance</li> <li>Hashing</li> <li>Assignment 7</li> <li>Sorting</li> <li>Templates &amp; STL</li> </ul> <p>\ud83d\udccc \u8bfe\u7a0b\u5185\u5bb9\u6db5\u76d6\uff1a</p> <ul> <li>C++\u57fa\u7840\u4e0e\u8fdb\u9636</li> <li>\u6570\u636e\u7ed3\u6784\u4e0e\u7b97\u6cd5</li> <li>\u56de\u6eaf\u3001\u9012\u5f52\u3001\u56fe\u8bba\u3001\u54c8\u5e0c\u3001\u7ee7\u627f\u3001STL \u7b49</li> </ul>"},{"location":"assignment0/","title":"Assignment0","text":"<ul> <li> Assignment 0<ol> <li>\u5b89\u88c5Qt<ul> <li> \u5b8c\u6210\u5b89\u88c5Qt Creator</li> <li> \u63a8\u8350\u8bbe\u7f6eRecommended Settings for Qt Creator</li> <li> \u8c03\u8bd5\u52a9\u624b</li> </ul> </li> <li>\u4e0b\u8f7d\u5e76\u8fd0\u884c\u542f\u52a8\u6587\u4ef6<ul> <li> \u6839\u636e\u8c03\u8bd5\u6559\u7a0b\u8c03\u8bd5\u542f\u52a8\u6587\u4ef6\uff0c\u5e76\u8bb0\u4e0b\u4f5c\u4e1a\u9700\u8981\u7684\u7279\u6b8ahashVal\u503c<code>12419</code></li> </ul> </li> </ol> </li> <li> \u770b\u5b8c\u4e86Debugger Tutorial</li> <li>You know how to set a breakpoint to pause the program at a particular point.</li> <li>You know how to read the call stack and to see the values of local variables.</li> <li>You know how to single-step the program*(step over)* and see what values change*(\u6bcf\u6b65\u6267\u884c\u540e\uff0c\u53d1\u751f\u66f4\u6539\u7684\u5c40\u90e8\u53d8\u91cf\u4f1a\u6807\u7ea2)*</li> <li>You know how to run a function to completion*(step out\u5355\u6b65\u8df3\u51fanameHash\u51fd\u6570\uff0c\u76f4\u63a5\u83b7\u53d6return\u503c\u540e\u8fd4\u56de\u8c03\u7528nameHash\u7684\u4e3b\u51fd\u6570)*, and how to let the program keep on running\u23f8.</li> </ul>"},{"location":"assignment0/#lec1","title":"Lec1\u7ec3\u4e60","text":"<p>Hello, world</p> <p>stanfordVsCal</p>"},{"location":"assignment1/","title":"Assignment1","text":"<p>\u4f5c\u4e1a\u5730\u5740</p>"},{"location":"assignment1/#part1-stack-overflows","title":"Part1: Stack Overflows","text":"<p><pre><code>/* File: StackOverflow.cpp\n *\n * Q1: What do you see when you trigger a stack overflow when running the program without the debugger enabled? Write your answer below.\n * A1: Segmentation fault.\n *\n *\n * Q2: What is the sequence of values that repeats in the stack overflow? Write your answer below.\n * A2: 137, 164, 685, 203, 327, 549, 137.\n */\n</code></pre> answer1\uff1a</p> <p>answer2\uff1a\u5355\u6b65\u8c03\u8bd5\u6bcf\u6b21\u90fd\u53ef\u4ee5\u770b\u5230index</p>"},{"location":"assignment1/#part2-only-connect","title":"Part2: Only Connect","text":"<p>\u8981\u6c42\uff1a 1. \u7f16\u5199\u6d4b\u8bd5\u7528\u4f8b 2. \u9012\u5f52\u5730\u5b8c\u6210<code>onlyConnectize</code>\uff0c\u63a5\u53d7\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u4ec5\u4fdd\u7559\u8f85\u97f3\u5b57\u6bcd\u5e76\u8f6c\u6362\u4e3a\u5927\u5199\u540e\u8f93\u51fa</p>"},{"location":"assignment1/#1","title":"1. \u6d4b\u8bd5\u7528\u4f8b","text":"<pre><code>STUDENT_TEST(\"Handles empty string.\") {\n    EXPECT_EQUAL(onlyConnectize(\"\"), \"\");\n    EXPECT_EQUAL(onlyConnectize(\"aeiou\"), \"\");\n    EXPECT_EQUAL(onlyConnectize(\"!@#?\"), \"\");\n}\n</code></pre>"},{"location":"assignment1/#2","title":"2. \u51fd\u6570\u5b9e\u73b0","text":"<pre><code>string onlyConnectize(string phrase) {\n    // Base case\n    if (phrase.empty()) {\n        return \"\";\n    }\n\n    // Keep only consonant letters\n    string ans = \"\";\n    char c = phrase[0];\n\n    if (isalpha(c)) {\n        c = toupper(c);\n        if (c != 'A' &amp;&amp; c != 'E' &amp;&amp; c != 'I' &amp;&amp; c != 'O' &amp;&amp; c != 'U') {\n            ans += c;\n        }\n    }\n\n    // Recursive\n    return ans + onlyConnectize(phrase.substr(1));\n}\n</code></pre>"},{"location":"assignment1/#part3-playing-fair","title":"Part3: Playing Fair","text":"<ol> <li>\u7f16\u5199\u6d4b\u8bd5\u7528\u4f8b</li> <li>\u9012\u5f52\u5b9e\u73b0aSequenceOfOrder \u548c bSequenceOfOrder</li> </ol>"},{"location":"assignment1/#1_1","title":"1. \u6d4b\u8bd5\u7528\u4f8b","text":"<pre><code>STUDENT_TEST(\"An A-sequence of order n has length 2n\") {\n    int n = 4;\n    EXPECT_EQUAL(aSequenceOfOrder(n).length(), (1 &lt;&lt; n));\n}\n</code></pre>"},{"location":"assignment1/#2_1","title":"2. \u51fd\u6570\u5b9e\u73b0","text":"<pre><code>string aSequenceOfOrder(int n) {\n    // Handles error\n    if (n &lt; 0) {\n        error(\"n must be greater than or equal to 0\");\n    }\n\n    // Base case\n    if (n == 0) {\n        return \"A\";\n    }\n\n    // Recursion\n    return aSequenceOfOrder(n - 1) + bSequenceOfOrder(n - 1);\n}\n\nstring bSequenceOfOrder(int n) {\n    // Handles error\n    if (n &lt; 0) {\n        error(\"n must be greater than or equal to 0\");\n    }\n\n    // Base case\n    if (n == 0) {\n        return \"B\";\n    }\n\n    // Recursion\n    return bSequenceOfOrder(n - 1) + aSequenceOfOrder(n - 1);\n}\n</code></pre>"},{"location":"assignment1/#_1","title":"\u7ed3\u679c\u5c55\u793a","text":""},{"location":"assignment1/#part4-sandpiles","title":"Part4: Sandpiles","text":"<ol> <li>\u7f16\u5199\u6d4b\u8bd5\u7528\u4f8b</li> <li>\u5b9e\u73b0\u5411\u6c99\u5806\u6254\u4e00\u7c92\u6c99\u7684\u51fd\u6570</li> </ol>"},{"location":"assignment1/#1_2","title":"1. \u6d4b\u8bd5\u7528\u4f8b","text":"<pre><code>STUDENT_TEST(\"Ensure boundary cells do not cause out-of-bounds errors.\") {\n    Grid&lt;int&gt; before = {\n        { 3, 0, 0 },\n        { 0, 0, 0 },\n        { 0, 0, 0 }\n    };\n    Grid&lt;int&gt; after = {\n        { 0, 1, 0 },\n        { 1, 0, 0 },\n        { 0, 0, 0 }\n    };\n\n    dropSandOn(before, 0, 0);\n    EXPECT_EQUAL(before, after);\n}\n</code></pre>"},{"location":"assignment1/#2_2","title":"2. \u5b9e\u73b0\u9012\u5f52\u51fd\u6570","text":"<p><pre><code>void dropSandOn(Grid&lt;int&gt;&amp; world, int row, int col) {\n    if (!world.inBounds(row, col)) {\n        return;\n    }\n\n    world[row][col] += 1;\n    if (world[row][col] &gt; 3) {\n        world[row][col] = 0;\n        dropSandOn(world, row - 1, col);\n        dropSandOn(world, row + 1, col);\n        dropSandOn(world, row, col - 1);\n        dropSandOn(world, row, col + 1);\n    }\n}\n</code></pre> \u8fd9\u4e2a\u9012\u5f52\u4e0d\u9700\u8981Base case</p>"},{"location":"assignment1/#_2","title":"\u7ed3\u679c\u5c55\u793a","text":""},{"location":"assignment1/#part5-plotter","title":"Part5: Plotter","text":"<p>\u76ee\u6807\uff1a\u7f16\u5199runPlotterScript\u51fd\u6570\uff0c\u8fd9\u4e00\u90e8\u5206\u4e0d\u9700\u8981\u4f7f\u7528\u9012\u5f52</p>"},{"location":"assignment1/#_3","title":"\u4ee3\u7801\u5982\u4e0b\uff1a","text":"<pre><code>#include \"Plotter.h\"\n#include \"strlib.h\"\nusing namespace std;\n\nvoid move(double&amp; x0, double&amp; y0, double x1, double y1, bool isPenUp, PenStyle style);\n\nvoid runPlotterScript(istream&amp; input) {\n    // Initialize the plotter\n    double x0 = 0, y0 = 0;\n    PenStyle style = { 1, \"black\" };\n    bool isPenUp = true;\n\n    // \u4e00\u884c\u4e00\u884c\u4ece\u6587\u4ef6\u8bfb\u53d6\u547d\u4ee4\n    for (string line; getline(input, line); ) {\n        // Split strings\n        Vector&lt;string&gt; command = stringSplit(line, \" \");\n        string c = toLowerCase(command[0]);\n\n        // \u786e\u5b9a\u547d\u4ee4\uff0c\u5e76\u6267\u884c\u5bf9\u5e94\u64cd\u4f5c\n        if (c == \"pendown\") {\n            isPenUp = false;\n        } else if (c == \"penup\") {\n            isPenUp = true;\n        } else if (c == \"moveabs\") {\n            double x1 = stringToReal(command[1]);\n            double y1 = stringToReal(command[2]);\n            move(x0, y0, x1, y1, isPenUp, style);\n        } else if (c == \"moverel\") {\n            double x1 = x0 + stringToReal(command[1]);\n            double y1 = y0 + stringToReal(command[2]);\n            move(x0, y0, x1, y1, isPenUp, style);\n        } else if (c == \"pencolor\") {\n            style.color = command[1];\n        } else {\n            style.width = stringToReal(command[1]);\n        }\n    }\n}\n\n// MoveAbs &amp; MoveRel\nvoid move(double&amp; x0, double&amp; y0, double x1, double y1, bool isPenUp, PenStyle style) {\n    if (!isPenUp) {\n        drawLine(x0, y0, x1, y1, style);\n    }\n\n    x0 = x1;\n    y0 = y1;\n}\n</code></pre>"},{"location":"assignment1/#_4","title":"\u90e8\u5206\u7ed8\u56fe\u7ed3\u679c\u5c55\u793a","text":"<p>\u732b\u732b\u53ef\u7231o(=\u2022\u30a7\u2022=)m  \u87d1...\u87d1\u74e2\u866b\ud83d\udc1e </p> <p>\u606d\u559c\u5b8c\u6210Assignment1\uff0c\u6492\u82b1(\uff89<sup>\u30ee</sup>)\uff89*:\u30fb\uff9f\u2727 \u273f\u273f</p>"},{"location":"assignment2/","title":"Assignment2","text":"<p>Fun with Collections</p>"},{"location":"assignment2/#part1-rosetta-stone","title":"Part1: Rosetta Stone","text":""},{"location":"assignment2/#milestone-one-form-k-grams","title":"Milestone One: Form k-Grams","text":"<pre><code>Map&lt;string, double&gt; kGramsIn(const string&amp; str, int kGramLength) {\n    if (kGramLength &lt;= 0) {\n        error(\"kGramLength must be positive\");\n    }\n\n    Map&lt;string, double&gt; kGrams;\n    if (str.length() &lt; kGramLength) {\n        return kGrams;\n    }\n\n    for (int i = 0; i + kGramLength &lt;= str.length(); i++) {\n        string kGram = str.substr(i, kGramLength);\n        kGrams[kGram]++;\n    }\n    return kGrams;\n}\n</code></pre>"},{"location":"assignment2/#milestone-two-normalize-frequencies","title":"Milestone Two: Normalize Frequencies","text":"<p>\u8981\u6c42\uff1akGrams -&gt; nGrams \u5f52\u4e00\u5316\uff0c\u6216\u8005\u8bf4\u662f**\u5411\u91cf\u7684\u5355\u4f4d\u5316**\uff1a\u5c06**\u9891\u7387\u5411\u91cf**\u8f6c\u6362\u4e3a**\u5355\u4f4d\u5411\u91cf**\uff0c\u4f7f\u5f97\u5411\u91cf\u7684\u957f\u5ea6\uff08\u6a21\uff09\u4e3a1\u3002</p> <ol> <li>\u8ba1\u7b97\u9891\u7387\u5411\u91cf\u7684\u5e73\u65b9\u548c\uff1a$S = \\sum_{} f_i^2\u200b$</li> <li>\u8ba1\u7b97\u5f52\u4e00\u5316\u56e0\u5b50\uff1a$\\sqrt{S}$</li> <li>\u5f52\u4e00\u5316\u6bcf\u4e2a\u9891\u7387\uff1a\u5c06\u6bcf\u4e2a\u9891\u7387\u9664\u4ee5$\\sqrt{S}$\u5c31\u53ef\u4ee5\u4e86</li> </ol> <p>\u6ce8\u610f\uff1a\u5224\u65ad\u5e73\u65b9\u548c\u662f\u5426\u4e3a0\u65f6\uff0c\u76f4\u63a5<code>if (sum == 0.0)</code>\u6d4b\u8bd5\u65e0\u6cd5\u901a\u8fc7\uff0c\u867d\u7136\u4e0d\u77e5\u9053\u4e3a\u4ec0\u4e48\u5168\u4e3a0\u5e73\u65b9\u548c\u7684\u60c5\u51b5\u4e0b\u4e5f\u6709\u6d6e\u70b9\u6570\u4e0d\u7cbe\u786e\uff08\u5e94\u8be5\u662f\u8fd9\u4e2a\u95ee\u9898\uff1f\uff09\u5e03\u5c14\u8bed\u53e5\u6539\u6210<code>sum &lt; 1</code>\u6216\u8005<code>sum &lt; 1e-9</code>\u90fd\u53ef\u4ee5\u3002</p> <pre><code>Map&lt;string, double&gt; normalize(const Map&lt;string, double&gt;&amp; input) {\n    if (input.isEmpty()) {\n        error(\"Map is empty!\");\n    }\n\n    double sum = 0.0;\n    Map&lt;string, double&gt; nGrams; // normalize_frequencies_kGrams\n    for (string kgram : input) {\n        sum += pow(input[kgram], 2.0);\n    }\n\n    if (sum &lt; 1) {\n        error(\"At least one nonzero value!\");\n    }\n\n    for (string kgram : input) {\n        nGrams[kgram] = input[kgram] / sqrt(sum);\n    }\n\n    return nGrams;\n}\n</code></pre>"},{"location":"assignment2/#milestone-three-filter-out-uncommon-trigrams","title":"Milestone Three: Filter Out Uncommon Trigrams","text":"<p>\u8981\u6c42\uff1akGrams -&gt; hGrams \u5f97\u51fa\u6700\u9891\u7e41\u7684numToKeep\u4e2akGrams</p> <p>\u7528\u5230\u4e86\u4f18\u5148\u961f\u5217\uff0c\u67e5\u6587\u6863\u540e\u518d\u5199PriorityQueue <pre><code>Map&lt;string, double&gt; topKGramsIn(const Map&lt;string, double&gt;&amp; source, int numToKeep) {\n    Map&lt;string, double&gt; hGrams; // high_frequency_kGrams\n    if (numToKeep &lt; 0) {\n        error(\"numToKeep must be positive!\");\n    } else if (numToKeep &gt;= source.size()) {\n        return source;\n    } else if (numToKeep == 0) {\n        return hGrams;\n    }\n\n    PriorityQueue&lt;string&gt; pq;\n    for (string kgram : source) {\n        pq.enqueue(kgram, source[kgram]);\n    }\n\n    while (pq.size() &gt; numToKeep) {\n        pq.dequeue();\n    }\n\n    while (!pq.isEmpty()) {\n        double frequency = pq.peekPriority();\n        string kgram = pq.dequeue();\n        hGrams[kgram] = frequency;\n    }\n\n    return hGrams;\n}\n</code></pre></p>"},{"location":"assignment2/#milestone-four-implement-cosine-similarity","title":"Milestone Four: Implement Cosine Similarity","text":"<p>\u8981\u6c42\uff1a\u627e\u5230\u4e24\u4e2anGrams\u7684\u4ea4\u96c6\u540e\uff0c\u8ba1\u7b97\u9891\u7387\u4e58\u79ef\u7684\u603b\u548c\uff0c\u5373\u4e3a\u4f59\u5f26\u76f8\u4f3c\u5ea6\u3002</p> <p>\u601d\u60f3\uff1a\u8f93\u5165\u4e24\u4e2anGrams\uff08\u8bb0\u4e3a$P_1$\u3001$P_2$\uff09\uff0c$P_1$\u3001$P_2$\u662f\u5df2\u7ecf**\u5f52\u4e00\u5316**\u7684kGram\u9891\u7387\u5206\u5e03\uff0c\u5b83\u4eec\u7684\u9891\u7387\u5411\u91cf\u662f\u5355\u4f4d\u5411\u91cf\u3002\u901a\u8fc7\u8ba1\u7b97\u4e24\u4e2a\u5411\u91cf\u7684\u70b9\u79ef\uff08\u5185\u79ef\uff09\uff0c\u5f97\u5230\u5b83\u4eec\u7684\u5939\u89d2\u4f59\u5f26\u503c\uff0c\u7528\u4e8e\u8861\u91cf\u76f8\u4f3c\u6027\u3002</p> <ol> <li>\u627e\u5230\u5171\u6709\u7684 kgram\uff1a\u627e\u5230$P_1$\u3001$P_2$\u4e2d\u5171\u6709\u7684kgram (\u5373Map\u4e2dkey\u76f8\u540c\u7684\u952e\u503c\u5bf9)</li> <li>\u8ba1\u7b97\u70b9\u79ef\uff1a\u5bf9\u4e8e\u6bcf\u4e2a\u5171\u6709\u7684kgram\uff0c\u5c06\u5b83\u4eec\u5728$P_1$\u3001$P_2$\u4e2d\u7684\u9891\u7387\u5bf9\u5e94\u76f8\u4e58\uff0c\u540e\u6c42\u548c\uff1a$\\sum_{} P_1(\\text{kgram}) \\times P_2(\\text{kgram})$ (\u5373key\u76f8\u540c\u7684\u952e\u503c\u5bf9\uff0c\u5c06\u5b83\u4eec\u503c\u5bf9\u5e94\u76f8\u4e58\uff0c\u518d\u6c42\u548c)</li> </ol> <p>\u516c\u5f0f\uff1a$\\text{\u4f59\u5f26\u76f8\u4f3c\u5ea6} = \\cos(\\theta) = \\frac{\\mathbf{P_1} \\cdot \\mathbf{P_2}}{|\\mathbf{P_1}| \\cdot |\\mathbf{P_2}|}$ \u7531\u4e8e$P_1$\u3001$P_2$\u90fd\u662f\u5df2\u7ecf\u5f52\u4e00\u5316\u7684\u5355\u4f4d\u5411\u91cf\uff0c\u7b80\u5316\u4e3a$\\cos(\\theta) = P_1 \\cdot P_2$ <pre><code>double cosineSimilarityOf(const Map&lt;string, double&gt;&amp; lhs, const Map&lt;string, double&gt;&amp; rhs) {\n    double sum = 0.0;\n    for (string ngram : lhs) {\n        if (rhs.containsKey(ngram)) {\n            sum += lhs[ngram] * rhs[ngram];\n        }\n    }\n    return sum;\n}\n</code></pre></p>"},{"location":"assignment2/#milestone-five-guess-a-texts-language","title":"Milestone Five: Guess a Text\u2019s Language","text":"<p>\u904d\u5386\u8bed\u6599\u5e93\uff0c\u5c06\u5f53\u524d\u8bed\u8a00Profile($P_1$)\u4e0e\u8bed\u6599\u5e93\u4e2d\u7684\u6bcf\u4e00\u79cd\u8bed\u8a00Profile($P_2$)\u90fd\u8ba1\u7b97\u4f59\u5f26\u76f8\u4f3c\u5ea6*(\u4e0a\u4e00\u6b65\u5df2\u5b9e\u73b0)* \u628asimilarity\u4f5c\u4e3a\u4f18\u5148\u7ea7\u5c06language\u653e\u8fdb\u4f18\u5148\u961f\u5217\uff0cdequeue\u5230\u53ea\u5269\u4e0b\u6700\u540e\u4e00\u79cdsimilarity\u503c\u6700\u5927\u7684language\u5c31\u662f\u76ee\u6807\u8bed\u8a00 <pre><code>string guessLanguageOf(const Map&lt;string, double&gt;&amp; textProfile,\n                       const Set&lt;Corpus&gt;&amp; corpora) {\n    PriorityQueue&lt;string&gt; pq;\n    for (Corpus language : corpora) {\n        double similarity = cosineSimilarityOf(textProfile, language.profile);\n        pq.enqueue(language.name, similarity);\n    }\n\n    while (pq.size() &gt; 1) {\n        pq.dequeue();\n    }\n\n    return pq.dequeue();\n}##\n</code></pre></p> <p></p> <p>\u63a5\u4e0b\u6765\uff0c\u6d4b\u8bd5\u6211\u4eec\u7684\u4ee3\u7801\u662f\u5426\u80fd\u6b63\u786e\u8bc6\u522b\u8bed\u8a00</p>"},{"location":"assignment2/#milestone-six-explore-and-evaluate","title":"Milestone Six: Explore and Evaluate","text":"<p>  1-10\u662f\u6b63\u786e\u8bc6\u522b\u7684\u4f8b\u5b50\uff0c11-14\u662f\u65e0\u6cd5\u51c6\u786e\u8bc6\u522b\u7684\u4f8b\u5b50\u3002\u63d0\u51fa\u6d4b\u8bd5\u5de5\u5177\u53ef\u9760\u6027\u7684\u65b9\u6cd5\uff08\u8fd9\u90e8\u5206\u8df3\u8fc7\uff09</p> <p>\u81f3\u6b64\uff0cPart1\u7ed3\u675f\u3002</p>"},{"location":"assignment2/#part-2-rising-tides","title":"Part 2: Rising Tides","text":"<ol> <li> <p>\u7528\u5230\u4e86bfs\uff0c\u6709\u70b9\u50cf\u4e4b\u524d\u5199\u7684\u5c9b\u5c7f\u95ee\u9898\u3002</p> </li> <li> <p>\u65b9\u5411\u6570\u7ec4 <pre><code>Grid&lt;bool&gt; floodedRegionsIn(const Grid&lt;double&gt;&amp; terrain,\n                            const Vector&lt;GridLocation&gt;&amp; sources,\n                            double height) {\n    int rows = terrain.numRows();\n    int cols = terrain.numCols();\n    Grid&lt;bool&gt; flooded(rows, cols);\n\n    Queue&lt;GridLocation&gt; q;\n    for (GridLocation source : sources) {\n        if (terrain[source.row][source.col] &lt;= height) {\n            flooded[source.row][source.col] = true;\n            q.enqueue(source);\n        }\n    }\n\n    while (!q.isEmpty()) {\n        GridLocation location = q.dequeue();\n\n        int r = location.row;\n        int c = location.col;\n\n        int dr[] = {-1, 1, 0, 0};\n        int dc[] = {0, 0, -1, 1};\n\n        for (int i = 0; i &lt; 4; i++) {\n            int nr = r + dr[i];\n            int nc = c + dc[i];\n\n            if (nr &gt;= 0 &amp;&amp; nr &lt; rows &amp;&amp; nc &gt;= 0 &amp;&amp; nc &lt; cols\n                &amp;&amp; !flooded[nr][nc] &amp;&amp; terrain[nr][nc] &lt;= height) {\n                flooded[nr][nc] = true;\n                q.enqueue(GridLocation(nr, nc));\n            }\n        }\n    }\n    return flooded;\n}\n</code></pre></p> </li> </ol> <p>\u5c31\u628a\u4ee3\u7801\u8d34\u4e0a\u6765\uff0c\u597d\u6b79\u505a\u70b9\u7b14\u8bb0\u554a\u5582\uff01\u5b8c\u5168\u4e0d\u7ba1\u590d\u4e60\u65f6\u5019\u7684\u81ea\u5df1\u7684\u6b7b\u6d3b\u662f\u5427Orz</p> <p> \u606d\u559c\u5b8c\u6210Assignment2\uff0c\u8036( \u2022\u0300 \u03c9 \u2022\u0301 )y</p>"},{"location":"assignment3/","title":"Assignment3","text":"<p>\u4f5c\u4e1a\u5730\u5740\uff1aRecursion!</p> <p>\u5907\u6ce8\uff1a\u4f5c\u4e1a3\u5b9e\u9645\u5e94\u8be5\u5728\u5b66\u5b8clec10**\u7a77\u4e3e\u641c\u7d22**\u548clec11**\u56de\u6eaf\u6cd5**\u540e\u518d\u5199\uff0c\u4f1a\u8f7b\u677e\u5f88\u591a\u3002\u6211\u770b\u5b8clec9\u5c31\u5199\u4e86\uff0c\u5199\u5f97\u975e\u5e38\u75db\u82e6</p>"},{"location":"assignment3/#part-one-the-sierpinski-triangle","title":"Part One: The Sierpinski Triangle","text":"<p>\u8c22\u5c14\u5bbe\u65af\u57fa\u4e09\u89d2\u5f62\u3002</p>"},{"location":"assignment3/#_1","title":"\u4ee3\u7801\u5b9e\u73b0","text":"<pre><code>void drawSierpinskiTriangle(GWindow&amp; window,\n                            double x0, double y0,\n                            double x1, double y1,\n                            double x2, double y2,\n                            int order) {\n    if (order &lt; 0) {\n        error(\"order &lt; 0\");\n    } else if (order == 0) {\n        drawTriangle(window, x0, y0, x1, y1, x2, y2);\n    } else {\n        drawSierpinskiTriangle(window, x0, y0, (x0 + x1) / 2, (y0 + y1) / 2, (x0 + x2) / 2, (y0 + y2) / 2, order - 1);\n        drawSierpinskiTriangle(window, x1, y1, (x0 + x1) / 2, (y0 + y1) / 2, (x1 + x2) / 2, (y1 + y2) / 2, order - 1);\n        drawSierpinskiTriangle(window, x2, y2, (x2 + x1) / 2, (y2 + y1) / 2, (x0 + x2) / 2, (y0 + y2) / 2, order - 1);\n    }\n}\n</code></pre>"},{"location":"assignment3/#_2","title":"\u7ed3\u679c\u5c55\u793a","text":""},{"location":"assignment3/#part-two-human-pyramids","title":"Part Two: Human Pyramids","text":"<p>\u4eba\u7c7b\u91d1\u5b57\u5854\u3002 1. memoization</p> <p></p>"},{"location":"assignment3/#_3","title":"\u4ee3\u7801\u5b9e\u73b0","text":"<p>\u4e0d\u613f\u610f\u4ee3\u7801\u91cc\u51fa\u73b0\u591a\u4e2a<code>160</code>\uff0c\u6240\u4ee5\u58f0\u660e\u4e86\u4e00\u4e2a\u5168\u5c40\u5e38\u91cf\u3002\uff08\u5728\u9759\u6001\u5c40\u90e8\u53d8\u91cf\u548c\u5168\u5c40\u5e38\u91cf\u4e2d\u9009\u62e9\u4e86\u5168\u5c40\u5e38\u91cf\uff0c\u867d\u8bf4\u5bb9\u6613\u6c61\u67d3\u5168\u5c40\u53d8\u91cf\u7a7a\u95f4\u4ec0\u4e48\u7684\uff0c\u4f46\u6211\u8fd8\u662f\u89c9\u5f97\u8fd9\u6837\u53ef\u8bfb\u6027\u548c\u540e\u7eed\u4fee\u6539\u8d77\u6765\u66f4\u597d\u4e00\u70b9\uff09 <pre><code>#include \"HumanPyramids.h\"\n#include \"hashmap.h\"\nusing namespace std;\n\nconst double PERSON_WEIGHT = 160.0;\n\ndouble weightOnBackOf(int row, int col, int pyramidHeight) {\n    static HashMap&lt;string, double&gt; m;\n    string key = to_string(row) + \",\" + to_string(col);\n\n    if (m.containsKey(key)) {   // \u68c0\u67e5\u662f\u5426\u5df2\u7ecf\u8ba1\u7b97\u8fc7\u4e86\n        return m[key];\n    }\n\n    if (row &lt; 0 || col &lt; 0 || col &gt; row || row &gt; pyramidHeight) {\n        error(\"Illegal input\");  // \u8d8a\u754c\u8bbf\u95ee\u62a5\u9519\n    }\n\n    if (row == 0 &amp;&amp; col == 0) {  // Base case\n        return 0.0;\n    }\n\n    // Recursive case\n    double result = 0.0;\n\n    if (col &gt; 0) { // \u5de6\u4e0a\u6709\u4eba\n        result += (PERSON_WEIGHT + weightOnBackOf(row - 1, col - 1, pyramidHeight)) / 2;\n    }\n    if (col &lt; row) { // \u53f3\u4e0a\u6709\u4eba\n        result += (PERSON_WEIGHT + weightOnBackOf(row - 1, col, pyramidHeight)) / 2;\n    }\n\n    m[key] = result; // \u7f13\u5b58\n    return result;\n}\n</code></pre></p>"},{"location":"assignment3/#_4","title":"\u7ed3\u679c\u5c55\u793a","text":""},{"location":"assignment3/#part-three-what-are-you-doing","title":"Part Three: What Are YOU Doing?","text":"<p>\u8fd9\u9898\u53ef\u4ee5\u53c2\u8003\u4e00\u4e0b\u8bfe\u4e0a\u8bb2\u7684\u7ec3\u4e60\u9898<code>evaluate</code>\uff1a\u53d8\u91cfindex</p> <ol> <li>\u6bcf\u6b21\u9012\u5f52\u5230\u7ec8\u6b62\u6761\u4ef6\u5f97\u5230\u4e00\u79cd\u53ef\u80fd\u7ed3\u679ccurrentResult</li> <li>\u6240\u6709currentResult\u52a0\u8d77\u6765\u7684\u96c6\u5408results\uff0c\u5c31\u662f\u6240\u6709\u53ef\u80fd\u7684\u5f3a\u8c03\u60c5\u51b5</li> </ol> <pre><code>#include &lt;cctype&gt;\n#include \"strlib.h\"\n...\nvoid allEmphasesOfHelper(const Vector&lt;string&gt;&amp; tokens, int index, Set&lt;string&gt;&amp; results, string currentResult);\n\nSet&lt;string&gt; allEmphasesOf(const string&amp; sentence) {\n    Vector&lt;string&gt; tokens = tokenize(sentence);\n\n    Set&lt;string&gt; results;\n    allEmphasesOfHelper(tokens, 0, results, \"\");\n    return results;\n}\n\nvoid allEmphasesOfHelper(const Vector&lt;string&gt;&amp; tokens, int index, Set&lt;string&gt;&amp; results, string currentResult) {\n    // Base case: \u904d\u5386tokens\u7ed3\u675f\n    if (index == tokens.size()) {\n        results.add(currentResult);\n        return;\n    }\n\n    string token = tokens[index];\n\n    // Recursive case\n    if (isalpha(token[0])) {\n        // \u8be5\u5355\u8bcd\u5927\u5199\u7684\u60c5\u51b5\n        string upperCase = toUpperCase(token);\n        allEmphasesOfHelper(tokens, index + 1, results, currentResult + upperCase);\n\n        // \u8be5\u5355\u8bcd\u5c0f\u5199\u7684\u60c5\u51b5\n        string lowerCase = toLowerCase(token);\n        allEmphasesOfHelper(tokens, index + 1, results, currentResult + lowerCase);\n    } else { // \u8df3\u8fc7\u975e\u5b57\u6bcd\n        allEmphasesOfHelper(tokens, index + 1, results, currentResult + token);\n    }\n}\n</code></pre>"},{"location":"assignment3/#part-four-shift-scheduling","title":"Part Four: Shift Scheduling","text":"<p>lengthOf()\u8fd4\u56de\u73ed\u6b21\u7684\u5de5\u4f5c\u65f6\u957f\uff0cvalueOf()\u8fd4\u56de\u73ed\u6b21\u5e26\u6765\u7684\u4ef7\u503c\u3001overlapsWith()\u6bd4\u8f83\u4e24\u4e2a\u73ed\u6b21\u662f\u5426\u51b2\u7a81</p> <p>lec11\u8bfe\u5802\u7ec3\u4e60<code>sublists</code>\u548c\u8fd9\u9898\u7c7b\u4f3c</p> <p><pre><code>\u601d\u8def\uff1a\n\n// \u9012\u5f52\u7ec8\u6b62\u6761\u4ef6\nif\uff08\u6ca1\u6709\u5269\u4f59\u73ed\u6b21\u4e86\uff1a\u5373\u672c\u6b21\u9012\u5f52\u8c03\u7528\u7684\u3010\u5269\u4f59\u7684\u73ed\u6b21\u3011\u96c6\u5408\u5df2\u7ecf\u4e3a\u7a7a\uff09{\n    \u8fd4\u56de\u3010\u5df2\u5206\u914d\u7684\u73ed\u6b21\u96c6\u5408\u3011\n}\n\n\u53d6\u51fa\u4e00\u4e2a\u73ed\u6b21\n    // Recursive case\n    if (\u8d85\u65f6 || \u73ed\u6b21\u51b2\u7a81) {\n        \u4e0d\u9009\u62e9\u8be5\u73ed\u6b21\n        \u9012\u5f52\u3010\u5269\u4f59\u7684\u73ed\u6b21\u3011\n    }\n    else {\n        1. \u4e0d\u9009\u62e9\u8be5\u73ed\u6b21\n            - \u76f4\u63a5\u9012\u5f52\u3010\u5269\u4f59\u7684\u73ed\u6b21\u3011\n        2. \u9009\u62e9\u8be5\u73ed\u6b21\n            - \u5c06\u8be5\u73ed\u6b21\u6dfb\u52a0\u5230\u3010\u5df2\u5206\u914d\u7684\u73ed\u6b21\u3011\u4e2d\uff0c\u7136\u540e\u9012\u5f52\u5269\u4f59\u7684\u73ed\u6b21\n    }\n\n    \u6bd4\u8f83\u9009\u62e9/\u4e0d\u9009\u62e9\u8be5\u73ed\u6b21\u7684value\u503c\n        return value\u66f4\u5927\u7684Set&lt;Shift&gt;\n</code></pre> \u4e2d\u95f4\u90e8\u5206\u53bb\u6389if-else\u8bed\u53e5\uff0c\u7b80\u5316\u4e3a\uff1a <pre><code>    // Recursive case\n    \u4e0d\u9009\u62e9\u8be5\u73ed\u6b21 \n        - \u9012\u5f52\u3010\u5269\u4f59\u7684\u73ed\u6b21\u3011\n\n    if (\u6ca1\u8d85\u65f6 &amp;&amp; \u73ed\u6b21\u4e0d\u51b2\u7a81) {\n        \u9009\u62e9\u8be5\u73ed\u6b21\n            - \u5c06\u8be5\u73ed\u6b21\u6dfb\u52a0\u5230\u3010\u5df2\u5206\u914d\u7684\u73ed\u6b21\u3011\u4e2d\uff0c\u7136\u540e\u9012\u5f52\u5269\u4f59\u7684\u73ed\u6b21\n    }\n</code></pre></p>"},{"location":"assignment3/#_5","title":"\u4ee3\u7801\u5b9e\u73b0","text":"<p><pre><code>Set&lt;Shift&gt; highestValueScheduleForHelper(const Set&lt;Shift&gt;&amp; shifts, int maxHours, Set&lt;Shift&gt;&amp; assigned);\n\nSet&lt;Shift&gt; highestValueScheduleFor(const Set&lt;Shift&gt;&amp; shifts, int maxHours) {\n    if (maxHours &lt; 0) {\n        error(\"Illegal maxHours\");\n    }\n\n    Set&lt;Shift&gt; assigned;\n    return highestValueScheduleForHelper(shifts, maxHours, assigned);\n}\n\nSet&lt;Shift&gt; highestValueScheduleForHelper(const Set&lt;Shift&gt;&amp; shifts, int maxHours, Set&lt;Shift&gt;&amp; assigned) {\n    // Base case: \n    if (shifts.isEmpty()) {\n        return assigned;\n    }\n\n    Shift currentShift = shifts.first();\n    Set&lt;Shift&gt; remainingShifts = shifts - currentShift;\n\n    bool overlapped = false;\n    for (Shift s : assigned) {\n        if (overlapsWith(s, currentShift)) {\n            overlapped = true;\n            break;\n        }\n    }\n\n    int currentTime = lengthOf(currentShift);\n    bool overtime = (currentTime &gt; maxHours) ? true : false;\n\n    Set&lt;Shift&gt; selected = assigned;\n    Set&lt;Shift&gt; unselected = assigned;\n\n    // \u6240\u6709\u7684Shift\u90fd\u6709\u201c\u4e0d\u9009\u62e9\u201d\u7684\u60c5\u51b5\n    unselected = highestValueScheduleForHelper(remainingShifts, maxHours, unselected);    \n\n    if (!overtime &amp;&amp; !overlapped) { // \u53ea\u6709\u6ee1\u8db3\u6761\u4ef6\u7684Shift\u624d\u80fd\u5728\u5f53\u524d\u8fd9\u6b21\u53ef\u80fd\u7ed3\u679c\u4e2d\u201c\u9009\u62e9\u201d\n        selected += currentShift;\n        selected = highestValueScheduleForHelper(remainingShifts, maxHours - currentTime, selected);\n    }\n\n    int v1 = 0;\n    for (Shift s : unselected) {\n        v1 += valueOf(s);\n    }\n\n    int v2 = 0;\n    for (Shift s : selected) {\n        v2 += valueOf(s);\n    }\n\n    return (v1 &gt; v2) ? unselected : selected;\n}\n</code></pre> \u61d2\u5f97\u5199\u6d4b\u8bd5\u7528\u4f8b\u4e86_\u00a0(:\u0437\u300d\u2220)_</p>"},{"location":"assignment3/#_6","title":"\u7ed3\u679c\u5c55\u793a","text":"<p>\u606d\u559c\u5b8c\u6210Assignment 3\uff01</p> <p>\u8fd9\u6b21\u4f5c\u4e1a\u662f\u76ee\u524d\u8017\u65f6\u6700\u4e45\u6700\u96be\u7684\u4e00\u6b21\uff0cPart 1\u30012\u8fd8\u6bd4\u8f83\u5bb9\u6613\uff0c\u5230Part 3\u5c31\u9700\u8981\u597d\u597d\u601d\u8003\u4e86\uff0cPart 4\u66f4\u662f\u5c1d\u8bd5\u4e86\u597d\u4e45\u597d\u4e45\u3002</p> <p>\u5e94\u8be5\u8fd8\u53ef\u4ee5\u4f18\u5316\uff0c\u6211\u7d2f\u4e86</p>"},{"location":"assignment4/","title":"Assignment4","text":"<p>\ud83d\udd17\u4f5c\u4e1a\u5730\u5740\uff1aRecursion to the Rescue!</p>"},{"location":"assignment4/#part-one-debugging-practice","title":"Part One: Debugging Practice","text":""},{"location":"assignment4/#milestone-1-explore-the-towers-of-hanoi","title":"Milestone 1: Explore the Towers of Hanoi","text":"<p>[!note] \u6c49\u8bfa\u5854\u95ee\u9898\uff1a - \u5c06 n \u4e2a\u5706\u76d8\u4ece\u5854 1 \u79fb\u52a8\u5230\u5854 3    1. \u5c06 n - 1 \u4e2a\u5706\u76d8\u4ece\u5854 1 \u79fb\u52a8\u5230\u5854 2   2. \u5c06\u5269\u4e0b\u7684\u4e00\u4e2a\u6700\u5927\u7684\u5706\u76d8\u4ece\u5854 1 \u79fb\u52a8\u5230\u5854 3   3. \u5c06 n - 1 \u4e2a\u5706\u76d8\u4ece\u5854 2 \u79fb\u52a8\u5230\u5854 3</p>"},{"location":"assignment4/#milestone-2-debug-a-broken-permutations-function","title":"Milestone 2: Debug a Broken Permutations Function","text":"<p>bug\u5728\uff1a <pre><code>Set&lt;string&gt; thisOption = permutationsRec(remaining, chosen += ch);\n// \u6539\u4e3achosen + ch\n</code></pre></p>"},{"location":"assignment4/#part-two-matchmaker","title":"Part Two: Matchmaker","text":""},{"location":"assignment4/#milestone-one-find-perfect-matchings","title":"Milestone One: Find Perfect Matchings","text":"<p>\u597d\u96beQAQ\u3002\u8111\u5b50\u9508\u4e86\u53c8\u4e0d\u4f1a\u5199\u56de\u6eaf\u4e86Orz</p>"},{"location":"assignment6/","title":"Assignment6","text":"<p>Huffman Coding\u970d\u592b\u66fc\u7f16\u7801</p>"},{"location":"assignment7/","title":"Assignment7","text":"<p>Assignment 7. The Great Stanford Hash-Off</p>"},{"location":"assignment_5/","title":"Assignment_5","text":"<p>CS106X_2018\u79cb\uff1aMiniBrowser CS106B_2022\u51ac\uff1aThe Adventures of Links Data Sagas</p>"},{"location":"lec10-12_exhaustive_search/","title":"Lec10-12_exhaustive_search","text":""},{"location":"lec10-12_exhaustive_search/#lec10exhaustive_search","title":"lec10\u7a77\u4e3e\u641c\u7d22exhaustive_search","text":"<p>\u539f\u6765\u6211\u524d\u9762\u5199\u7684\u90a3\u4e9b\u9898\u7528\u5230\u7684\u662f**\u7a77\u4e3e\u641c\u7d22**\u7684\u77e5\u8bc6\uff0c\u5230\u8fd9\u91cc\u624d\u5b66\u554a~\u4f5c\u4e1a\u5199\u65e9\u4e86\u55b5</p>"},{"location":"lec10-12_exhaustive_search/#1printbinary","title":"\u8bfe\u5802\u7ec3\u4e601\uff1aprintBinary","text":"<pre><code>// printBinary(3) --&gt; 000\\n 001\\n 010\\n 011\\n 100\\n 101...\nvoid printBinary(int n, string prefix = \"\") {\n    if (n == 0) {\n        cout &lt;&lt; prefix &lt;&lt; endl;\n        return;\n    }\n\n    printBinary(n - 1, prefix + \"0\");\n    printBinary(n - 1, prefix + \"1\");\n}\n</code></pre> <p>\u4e0d\u77e5\u9053\u4e3a\u4ec0\u4e48\u672c\u5730\u6ca1\u6709<code>resursion.h</code>\uff0c\u53ef\u4ee5\u53bbCodeStepByStep\u4e0a\u5199\u8fd9\u9898\uff0c\u7528<code>recursionIndent</code>\u67e5\u770b\u9012\u5f52\u8c03\u7528\u7684\u60c5\u51b5\uff1a</p> <p>[!success]+ recursionIndent \u65af\u5766\u798f\u5e93\u91cc\u7684\u9012\u5f52\u5173\u7cfb\u53ef\u89c6\u5316\u51fd\u6570 <pre><code>void printAllBinary(int n, string prefix = \"\") {\n    cout &lt;&lt; recursionIndent()\n         &lt;&lt; \"n = \" &lt;&lt; n\n         &lt;&lt; \", prefix = \" &lt;&lt; prefix &lt;&lt; endl;\n    if (n &lt;= 0) {\n        cout &lt;&lt; prefix &lt;&lt; endl;\n        return;\n    }\n\n    printAllBinary(n - 1, prefix + \"0\");\n    printAllBinary(n - 1, prefix + \"1\");\n}\n</code></pre></p>"},{"location":"lec10-12_exhaustive_search/#2printdecimal","title":"\u8bfe\u5802\u7ec3\u4e602\uff1aprintDecimal","text":"<p>printDecimal <pre><code>// printDecimal(2) --&gt; 01, 02, ... , 98, 99\nvoid printDecimal(int n, string soFar = \"\") {\n    if (n &lt;= 0) {\n        cout &lt;&lt; soFar &lt;&lt; endl;\n        return;\n    }\n\n    for (int i = 0; i &lt;= 9; i++) {\n        printDecimal(n - 1, soFar + to_string(i));\n    }\n}\n</code></pre></p>"},{"location":"lec10-12_exhaustive_search/#3permute","title":"\u8bfe\u5802\u7ec3\u4e603\uff1apermute","text":"<p>permutation\u6392\u5217</p> <p>permute</p> <pre><code>// permute(\"MENY\") --&gt; \nvoid permute(string s, string prefix = \"\") {\n    if (s.empty()) {\n        cout &lt;&lt; prefix &lt;&lt; endl;\n        return;\n    }\n\n    for (int i = 0; i &lt; s.size(); i++) {\n        string s2 = s.substr(0, i) + s.substr(i + 1);\n        permute(s2, prefix + s[i]);\n    }\n}\n</code></pre> <ul> <li>[!] \u5982\u679c\u60f3\u628apermute\u7684\u7ed3\u679c\u5b58\u5165Vector\uff1a</li> </ul> <pre><code>void permute(string s, Vector&lt;string&gt;&amp; v, string prefix = \"\");\n\nint main() {\n    Vector&lt;string&gt; v;\n    permute(\"MENY\", v);\n    cout &lt;&lt; v &lt;&lt; endl;\n}\n\nvoid permute(string s, Vector&lt;string&gt;&amp; v, string prefix) {\n    if (s.empty()) {\n        v.add(prefix);\n        return;\n    }\n\n    for (int i = 0; i &lt; s.size(); i++) {\n        string s2 = s.substr(0, i) + s.substr(i + 1);\n        permute(s2, v, prefix + s[i]);\n    }\n}\n</code></pre> <ul> <li>[!] \u5982\u679c\u60f3\u8ba9permute\u8fd4\u56de\u4e00\u4e2aVector\uff1a</li> </ul> <pre><code>Vector&lt;string&gt; permute(string s);\nvoid permuteHelper(string s, Vector&lt;string&gt;&amp; v, string prefix);\n\nint main() {\n    Vector&lt;string&gt; v = permute(\"MENY\");\n    cout &lt;&lt; v &lt;&lt; endl;\n}\n\nVector&lt;string&gt; permute(string s) {\n    Vector&lt;string&gt; v;\n    permuteHelper(s, v, \"\");\n\n    return v;\n}\n\nvoid permuteHelper(string s, Vector&lt;string&gt;&amp; v, string prefix) {\n    if (s.empty()) {\n        v.add(prefix);\n        return;\n    }\n\n    for (int i = 0; i &lt; s.size(); i++) {\n        string s2 = s.substr(0, i) + s.substr(i + 1);\n        permuteHelper(s2, v, prefix + s[i]);\n    }\n}\n</code></pre>"},{"location":"lec10-12_exhaustive_search/#4combin","title":"\u8bfe\u5802\u7ec3\u4e604\uff1acombin","text":"<p>combin</p> <p>permute\u7684\u53d8\u4f53\uff0c\u4fdd\u8bc1\u5f97\u5230\u7684\u5b57\u7b26\u4e32\u662f\u552f\u4e00\u6ca1\u6709\u91cd\u590d\u7684\uff08\u5b57\u7b26\u53ef\u4ee5\u91cd\u590d\uff0c\u6bd4\u5982\u53ef\u4ee5\u6709<code>AAB</code>\uff0c\u4f46\u4e0d\u80fd\u6709\u4e24\u4e2a\u76f8\u540c\u7684\u5b57\u7b26\u4e32~~{AAB, AAB}~~</p> <pre><code>void combin(string s, string prefix = \"\") {\n    static Set&lt;string&gt; printed;\n    if (s.empty()) {\n        if (!printed.contains(prefix)) {\n            cout &lt;&lt; prefix &lt;&lt; endl;\n            printed.add(prefix);\n            return;\n        }\n    }\n\n    for (int i = 0; i &lt; s.size(); i++) {\n        string s2 = s.substr(0, i) + s.substr(i + 1);\n        combin(s2, prefix + s[i]);\n    }\n}\n</code></pre> <p>\u8fd9\u4e2a\u5b9e\u73b0\u4e0d\u597d\uff0c\u8fd8\u53ef\u4ee5\u4f18\u5316</p>"},{"location":"lec10-12_exhaustive_search/#problem-six-eating-a-chocolate-bar","title":"Problem Six: Eating a Chocolate Bar","text":"<p>CS106B_Section 2 \u8fd9\u9898\u662flec10\u3001lec11\u7684\u77e5\u8bc6\u70b9\uff1a\u7a77\u5c3d\u641c\u7d22\u548c\u56de\u6eaf\u6cd5</p>"},{"location":"lec10-12_exhaustive_search/#1-int","title":"1. \u8fd4\u56de\u65b9\u6cd5\u6570<code>int</code>","text":"<pre><code>int numWaysToEat(int numSquares) {\n    if (numSquares &lt; 0) {\n        error(\"Invalid input\");\n    }\n\n    if (numSquares &lt;= 1) {\n        return 1;\n    }\n\n    return numWaysToEat(numSquares - 1) + numWaysToEat(numSquares - 2);\n}\n</code></pre> <p>memoization\u4f18\u5316\u540e\uff1a</p> <pre><code>int numWaysToEat(int numSquares) {\n    static HashMap&lt;int, int&gt; m;\n    if (m.containsKey(numSquares)) {\n        return m[numSquares];\n    }\n\n    if (numSquares &lt; 0) {\n        error(\"Invalid input\");\n    }\n\n    if (numSquares &lt;= 1) {\n        return 1;\n    }\n\n    int result = numWaysToEat(numSquares - 1) + numWaysToEat(numSquares - 2);\n    m[numSquares] = result;\n    return result;\n}\n</code></pre>"},{"location":"lec10-12_exhaustive_search/#2-vectorint","title":"2. \u6253\u5370\u6240\u6709\u65b9\u6cd5\u6570<code>Vector&lt;int&gt;</code>","text":"<p>\u6ce8\u610fconst<sup>1</sup> <pre><code>void printWaysToEatHelper(int numSquares, const Vector&lt;int&gt;&amp; soFar) {\n    if (numSquares == 0) {\n        cout &lt;&lt; soFar &lt;&lt; endl;\n        return;\n    }\n    if (numSquares == 1) {\n        cout &lt;&lt; soFar + 1 &lt;&lt; endl;\n        return;\n    }\n\n    printWaysToEatHelper(numSquares - 1, soFar + 1);\n    printWaysToEatHelper(numSquares - 2, soFar + 2);\n}\n\nvoid printWaysToEat(int numSquares) {\n    if (numSquares &lt; 0) {\n        error(\"Invalid input!\");\n    }\n    printWaysToEatHelper(numSquares, {});\n}\n</code></pre></p> <ul> <li>[!] \u6bcf\u6b21\u9012\u5f52\u8c03\u7528\u65f6\uff0c<code>soFar + 1</code>\u00a0\u548c\u00a0<code>soFar + 2</code>\u00a0\u8fd9\u79cd\u64cd\u4f5c\uff0c\u4f1a\u751f\u6210\u65b0\u7684\u00a0<code>Vector&lt;int&gt;</code>\u00a0\u5bf9\u8c61\uff0c\u800c\u4e0d\u4f1a\u6539\u53d8\u539f\u59cb\u7684\u00a0<code>soFar</code>\u00a0\u5bf9\u8c61\u3002\u8fd9\u5c31\u4fdd\u8bc1\u4e86\u5728\u9012\u5f52\u8c03\u7528\u8fd4\u56de\u4e4b\u540e\uff0c\u539f\u59cb\u72b6\u6001\u4e0d\u4f1a\u53d7\u5230\u5f71\u54cd\uff0c\u4e5f\u5c31\u65e0\u9700\u8fdb\u884c \u201c\u56de\u9000\u201d \u64cd\u4f5c\u3002</li> <li>[!] \u5f53\u7136\u4e5f\u53ef\u4ee5\u7528\u56de\u6eaf\u6cd5\u76f4\u63a5\u5728\u540c\u4e00\u4e2a<code>Vector&lt;int&gt;</code>\u5bf9\u8c61\u4e0a\u4fee\u6539\u5566\uff01</li> </ul>"},{"location":"lec10-12_exhaustive_search/#21-stl","title":"2.1 \u56de\u6eaf\u6cd5\uff08\u7528STL","text":"<pre><code>void printWaysToEatHelper(int numSquares, vector&lt;int&gt;&amp; soFar) {\n    if (numSquares == 0) {\n        cout &lt;&lt; \"{\";\n        if (!soFar.empty()) {\n            cout &lt;&lt; soFar[0];\n            for (size_t i = 1; i &lt; soFar.size(); ++i) {\n                cout &lt;&lt; \", \" &lt;&lt; soFar[i];\n            }\n        }\n        cout &lt;&lt; \"}\" &lt;&lt; endl;\n        return;\n    }\n    if (numSquares == 1) {\n        soFar.push_back(1);\n\n        cout &lt;&lt; \"{\";\n        if (!soFar.empty()) {\n            cout &lt;&lt; soFar[0];\n            for (size_t i = 1; i &lt; soFar.size(); ++i) {\n                cout &lt;&lt; \", \" &lt;&lt; soFar[i];\n            }\n        }\n        cout &lt;&lt; \"}\" &lt;&lt; endl;\n\n        soFar.pop_back();\n        return;\n    }\n\n    soFar.push_back(1);\n    printWaysToEatHelper(numSquares - 1, soFar);\n    soFar.pop_back();\n\n    soFar.push_back(2);\n    printWaysToEatHelper(numSquares - 2, soFar);\n    soFar.pop_back();\n}\n\nvoid printWaysToEat(int numSquares) {\n    if (numSquares &lt; 0) {\n        error(\"Invalid input!\");\n    }\n\n    vector&lt;int&gt; soFar;\n    printWaysToEatHelper(numSquares, soFar);\n    // \u6ce8\u610f\u53bb\u6389const\u4fee\u9970\u7b26\u540e\u4e0d\u80fd\u518d\u5c06{}\u4f5c\u4e3a\u53c2\u6570\u4e86\n}\n</code></pre> <p>\u56e0\u4e3a\u65af\u5766\u798f\u5e93\u91ccVector\u7c7b\u6ca1\u6709\u4ece\u672b\u5c3e\u5220\u9664\u5143\u7d20\u7684\u51fd\u6570\uff0c\u6240\u4ee5\u8fd9\u91cc\u7528\u7684STL\u66f4\u65b9\u4fbf\u4e00\u70b9</p> <p>\u4e8b\u5b9e\u4e0a\uff0c\u56e0\u4e3a\u6ca1\u6709SPL\u4e2d\u7684cout\uff0c\u5bfc\u81f4\u8f93\u51favector\u7684\u5185\u5bb9\u590d\u6742\u4e86\u5f88\u591a\u3002\u3002</p>"},{"location":"lec10-12_exhaustive_search/#22-spl","title":"2.2 \u56de\u6eaf\u6cd5\uff08\u7528SPL","text":"<pre><code>void printWaysToEatHelper(int numSquares, Vector&lt;int&gt;&amp; soFar) {\n    if (numSquares == 0) {\n        cout &lt;&lt; soFar &lt;&lt; endl;\n        return;\n    }\n\n    if (numSquares == 1) {\n        soFar.add(1);\n        cout &lt;&lt; soFar &lt;&lt; endl;\n        soFar.remove(soFar.size() - 1);\n        return;\n    }\n\n    soFar.add(1);\n    printWaysToEatHelper(numSquares - 1, soFar);\n    soFar.remove(soFar.size() - 1);\n\n    soFar.add(2);\n    printWaysToEatHelper(numSquares - 2, soFar);\n    soFar.remove(soFar.size() - 1);\n}\n\nvoid printWaysToEat(int numSquares) {\n    if (numSquares &lt; 0) {\n        error(\"Invalid input!\");\n    }\n\n    Vector&lt;int&gt; soFar;\n    printWaysToEatHelper(numSquares, soFar);\n}\n</code></pre>"},{"location":"lec10-12_exhaustive_search/#3-setvectorint","title":"3. \u8fd4\u56de\u6240\u6709\u65b9\u6cd5\u6570\u7684\u96c6\u5408<code>Set&lt;Vector&lt;int&gt;&gt;</code>","text":"<pre><code>void waysToEatHelper(int numSquares, Set&lt;Vector&lt;int&gt;&gt;&amp; result, const Vector&lt;int&gt;&amp; soFar) {\n    if (numSquares == 0) {\n        result.add(soFar);\n        return;\n    }\n\n    if (numSquares == 1) {\n        result.add(soFar + 1);\n        return;\n    }\n\n    waysToEatHelper(numSquares - 1, result, soFar + 1);\n    waysToEatHelper(numSquares - 2, result, soFar + 2);\n}\n\nSet&lt;Vector&lt;int&gt;&gt; waysToEat(int numSquares) {\n    if (numSquares &lt; 0) {\n        error(\"Invalid input!\");\n    }\n\n    Set&lt;Vector&lt;int&gt;&gt; result;\n    waysToEatHelper(numSquares, result, {});\n    return result;\n}\n</code></pre>"},{"location":"lec10-12_exhaustive_search/#31","title":"3.1 \u5b98\u65b9\u9898\u89e3","text":"<pre><code>Set&lt;Vector&lt;int&gt;&gt; waysToEatRec(int numSquares, const Vector&lt;int&gt;&amp; soFar) {\n    if (numSquares == 0) {\n        return { soFar };\n    } else if (numSquares == 1) {\n        return { soFar + 1 };\n    } else {\n        return waysToEatRec(numSquares - 1, soFar + 1) + \n               waysToEatRec(numSquares - 2, soFar + 2);\n    }\n}\n\nSet&lt;Vector&lt;int&gt;&gt; waysToEat(int numSquares) {\n    if (numSquares &lt; 0) {\n        error(\"You owe me some chocolate!\");\n    }\n\n    return waysToEatRec(numSquares, {});\n</code></pre> <p>\u65af\u5766\u798f\u5e93<code>Set</code>\u7c7b\u91cd\u8f7d\u4e86<code>+</code>\u8fd0\u7b97\u7b26\uff0c\u8fd9\u6837\u5199\u597d\u7b80\u5355</p>"},{"location":"lec10-12_exhaustive_search/#lec11recursive-backtracking","title":"lec11\u56de\u6eaf\u6cd5recursive backtracking","text":""},{"location":"lec10-12_exhaustive_search/#1-dicerolls","title":"1. \u521d\u59cb\u56de\u6eaf\u6cd5\uff1adiceRolls","text":"<p>\u4f5c\u4e1a\u94fe\u63a5\uff1adiceRolls</p> <p>\u4f5c\u4e1a\u63cf\u8ff0\uff1a\u6295\u63b7n\u679a\u9ab0\u5b50\ud83c\udfb2\uff0c\u6253\u5370\u51fa\u6240\u6709\u53ef\u80fd\u7684\u7ed3\u679c\u3002\u53d8\u91cfdice\u4ee3\u8868\ud83c\udfb2\u6570\u91cf</p> <p>\u4f5c\u4e1a\u5907\u6ce8\uff1a\u6bcf\u4e00\u4e2a\u9ab0\u5b50\u90fd\u67096\u79cd\u53ef\u80fd\u7684\u70b9\u6570\uff08\u8fd9\u4e5f\u9700\u8981\u5907\u6ce8\u5417</p>"},{"location":"lec10-12_exhaustive_search/#11","title":"1.1 \u524d\u9762\u6240\u5b66\u7684\u89e3\u6cd5\uff1a","text":"<pre><code>void diceRollsHelper(int dice, const Vector&lt;int&gt;&amp; soFar) {\n    if (dice == 0) {\n        cout &lt;&lt; soFar &lt;&lt; endl;\n        return;\n    }\n\n    for (int i = 1; i &lt;= 6; i++) {\n        diceRollsHelper(dice - 1, soFar + i);\n    }\n}\n\nvoid diceRolls(int dice) {\n    diceRollsHelper(dice, {});\n}\n</code></pre>"},{"location":"lec10-12_exhaustive_search/#12","title":"1.2 \u56de\u6eaf\u6cd5","text":"<pre><code>void diceRollsHelper(int dice, Vector&lt;int&gt;&amp; soFar) {\n    if (dice == 0) {\n        cout &lt;&lt; soFar &lt;&lt; endl;\n        return;\n    }\n\n    for (int i = 1; i &lt;= 6; i++) {\n        // - choose\n        soFar.add(i);\n\n        // - explore\n        diceRollsHelper(dice - 1, soFar);\n\n        // - unchoose\n        soFar.remove(soFar.size() - 1);\n    }\n}\n\nvoid diceRolls(int dice) {\n    Vector&lt;int&gt; soFar;\n    diceRollsHelper(dice, soFar);\n}\n</code></pre>"},{"location":"lec10-12_exhaustive_search/#2-dicesum","title":"2. \u526a\u679ddiceSum","text":"<p>\ud83d\udd17diceSum</p> <p>\ud83d\udd0d\u4e0a\u9762\u6211\u4eec\u5f97\u51fa\u7684\u662f\u63b72\u679a\ud83c\udfb2\u7684\u6240\u6709\u53ef\u80fd\u60c5\u51b5\u3002</p> <p>\ud83d\udca1\u73b0\u5728\u52a0\u4e00\u70b9\u9650\u5236\uff1a\u6c42\u63b72\u679a\ud83c\udfb2\uff0c\u4e14\u548c\u4e3a7\u7684\u6240\u6709\u60c5\u51b5</p> <pre><code>void diceSumHelper(int dice, int sum, Vector&lt;int&gt;&amp; soFar, int currentSum) {\n    if (dice == 0) {\n        if (sum == currentSum) {\n            cout &lt;&lt; soFar &lt;&lt; endl;\n            return;\n        }\n    }\n\n    for (int i = 0; i &lt;= 6; i++) {\n        int min = currentSum + i + (dice - 1) * 1;\n        int max = currentSum + i + (dice - 1) * 6;\n\n        if (min &lt;= sum &amp;&amp; sum &lt;= max) {\n            // - choose\n            soFar.add(i);\n\n            // - explore\n            diceSumHelper(dice - 1, sum, soFar, currentSum + i);\n\n            // - unchoose\n            soFar.remove(soFar.size() - 1);\n        }\n    }\n}\n\nvoid diceSum(int dice, int sum) {\n    Vector&lt;int&gt; soFar;\n    diceSumHelper(dice, sum, soFar, 0);\n}\n</code></pre>"},{"location":"lec10-12_exhaustive_search/#3-sublists","title":"3. \u5b50\u96c6sublists","text":"<p>\ud83d\udd17printSubVectors</p> <p>\ud83d\udd0d\u5bf9\u4e8e\u96c6\u5408\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\uff0c\u6709\u5305\u542b\u5728\u5b50\u96c6\u4e2d\u548c\u4e0d\u5305\u542b\u5728\u5b50\u96c6\u4e2d\u4e24\u79cd\u53ef\u80fd</p>"},{"location":"lec10-12_exhaustive_search/#31-assignment-3","title":"3.1 \u7528\u5199Assignment 3\u7684\u65b9\u6cd5","text":"<pre><code>void sublistsHelper(Vector&lt;string&gt;&amp; v, Vector&lt;string&gt;&amp; chosen) {\n    // Base case\n    if (v.isEmpty()) {\n        cout &lt;&lt; chosen &lt;&lt; endl;\n        return;\n    }\n\n    // \u9009\u62e9\u7b2c\u4e00\u4e2a\u5143\u7d20\n    string s = v[0];\n    Vector&lt;string&gt; remaining = v.subList(1, v.size() - 1);\n\n    // \u5305\u542b\u5b83\n    Vector&lt;string&gt; selected = chosen;\n    selected.add(s);\n    sublistsHelper(remaining, selected);\n\n    // \u4e0d\u5305\u542b\u5b83\n    Vector&lt;string&gt; unselected = chosen;\n    sublistsHelper(remaining, unselected);\n}\n\nvoid sublists(Vector&lt;string&gt;&amp; v) {\n    Vector&lt;string&gt; chosen;\n    sublistsHelper(v, chosen);\n}\n</code></pre>"},{"location":"lec10-12_exhaustive_search/#32","title":"3.2 \u56de\u6eaf\u6cd5","text":"<pre><code>void sublistsHelper(Vector&lt;string&gt;&amp; v, Vector&lt;string&gt;&amp; chosen) {\n    // Base case\n    if (v.isEmpty()) {\n        cout &lt;&lt; chosen &lt;&lt; endl;\n        return;\n    }\n\n    // - choose\n    string first = v[0];\n    v.remove(0);\n\n    // \u5305\u542b\u5b83\n    chosen.add(first);\n    sublistsHelper(v, chosen);\n    chosen.remove(chosen.size() - 1);\n\n    // \u4e0d\u5305\u542b\u5b83\n    sublistsHelper(v, chosen);\n\n    // - unchoose\n    v.insert(0, first);\n}\n</code></pre> <p>STL\u5199\u6cd5\uff1a</p> <ol> <li><code>vector&lt;string&gt; remaining(v.bigin() + 1, v.end());</code></li> <li><code>chosen.push_back(first)</code> &amp;&amp; <code>chosen.pop_back()</code></li> <li><code>v.erase(v.begin())</code> &amp;&amp; <code>v.insert(v.begin(), first)</code></li> </ol>"},{"location":"lec10-12_exhaustive_search/#lec12-8-queens","title":"lec12\u56de\u6eaf\u6cd5 8 queens","text":"<p>\ud83d\udcbb\u8bfe\u5802\u7ec3\u4e60\uff1a - [x] travel</p> <pre><code>bool solveQueensHelper(Board&amp; board, int col) {\n    if (col &gt;= board.size()) {\n        cout &lt;&lt; board &lt;&lt; endl;\n        return true;\n    }\n\n    for (int row = 0; row &lt; board.size(); ++row) {\n        // -choose\n        if (board.isSafe(row, col)) {\n            board.place(row, col);\n        }\n\n        // - explore\n        int result = solveQueensHelper(board, col + 1);\n        if (result) {\n            return result;\n        }\n\n        // - unchoose\n        board.remove(row, col);\n    }\n    return false;\n}\n\nvoid solveQueens(Board&amp; board) {\n    solveQueensHelper(board, 0);\n}\n</code></pre> <ol> <li> <p>\u8fd9\u91ccHelper\u51fd\u6570\u7684\u53c2\u6570\uff1a<code>const Vector&lt;int&gt;&amp; soFar</code>\uff0c\u5982\u679c\u53bb\u6389<code>const</code>\u4fee\u9970\u7b26\uff0c\u5c06\u65e0\u6cd5\u5728\u8c03\u7528\u65f6\u628a<code>{}</code>\u4f5c\u4e3a\u53c2\u6570\u4f20\u5165\u3002</p> <p>\u26a0error: cannot bind non-const lvalue reference of type\u00a0<code>Vector&lt;int&gt;&amp;</code>\u00a0to an rvalue of type\u00a0<code>Vector&lt;int&gt;</code></p> <p>\uff08\u4e0d\u80fd\u5728\u975e<code>const</code>\u5de6\u503c\u5f15\u7528<code>Vector&lt;int&gt;</code>\u65f6\uff0c\u4f20\u5165\u53f3\u503c\u53c2\u6570<code>{}</code>\uff09\u00a0\u21a9</p> </li> </ol>"},{"location":"lec13-15_linked_lists/","title":"Lec13-15_Linked_Lists","text":"<p>\ud83d\udcbb\u8bfe\u540e\u7ec3\u4e60\uff1a</p> <p>Lec13\u6307\u9488\u7684\u5185\u5bb9\u90fd\u662f\u5df2\u7ecf\u4f1a\u7684\uff0c\u6ca1\u6709\u65b0\u4e1c\u897f\uff1bLec14\u5728\u8bb2\u5ea7\u7ed3\u675f\u7684\u65f6\u5019\u63d0\u5230\u4e86\uff1a <pre><code>void add(ListNode*&amp; first, int n) {...}\n</code></pre> \u8fd9\u4e2a<code>&amp;</code>\u5728C\u91cc\u9762\u662f\u6ca1\u6709\u7684\uff08\u5427\uff09\u3002\u5e94\u8be5\u662f\u56e0\u4e3a\u5f53\u94fe\u8868\u4e3a\u7a7a\u65f6\uff0cif\u8bed\u53e5\u91cc\u4fee\u6539\u4e86\u4f5c\u4e3a\u53c2\u6570\u4f20\u5165\u7684\u6307\u9488\u7684\u6307\u5411\uff0c\u6240\u4ee5\u8981**\u6309\u5f15\u7528\u4f20\u9012**\uff08\u6211\u731c\uff09\u3002\u76f8\u5e94\u7684\uff0c\u5728C\u91cc\u9762\u5982\u679c\u4e5f\u8981\u4fee\u6539\u4f20\u5165\u7684\u6307\u9488\u53c2\u6570\uff0c\u5e94\u8be5\u662f<code>ListNode** first</code>\u8fd9\u6837\uff1f\uff08\u5fd8\u4e86\uff09</p> <p>\u770b\u5b8cLec15\u540e\u7684\u89e3\u7b54\uff1ayesyes, \u5c31\u662f\u4f60\u60f3\u7684\u90a3\u6837\u3002\u5728C\u91cc\u9762\u6211\u4eec\u8fd8\u9700\u8981\u7528\u4e8c\u7ea7\u6307\u9488\uff0cC++\u53ea\u9700\u52a0\u4e0a<code>&amp;</code>\u5c31\u53ef\u4ee5\u4e86\u3002\u4ee5\u53caC\u5b66\u8fc7\u7684\uff0c\u8fd9\u5c31\u5fd8\u4e86\uff08\u9119\u5937</p>"},{"location":"lec13-15_linked_lists/#lec13","title":"Lec13\uff1a","text":"<ul> <li> 1. v1v2p1p2</li> <li> 2. parameterMystery1</li> </ul>"},{"location":"lec13-15_linked_lists/#lec14","title":"Lec14","text":"<ul> <li> 1. min</li> <li> 2. countDuplicates</li> </ul>"},{"location":"lec13-15_linked_lists/#_1","title":"\u5b9a\u4e49\u94fe\u8868\u8282\u70b9","text":"<pre><code>struct ListNode {\n    int val;\n    ListNode* next;\n\n    ListNode() : val(0), next(nullptr) {}\n    ListNode(int x) : val(x), next(nullptr) {}\n    ListNode(int x, ListNode* next) : val(x), next(next) {}\n}\n</code></pre>"},{"location":"lec13-15_linked_lists/#vectortolinkedlist","title":"vectorToLinkedList()","text":"<pre><code>ListNode* vectorToLinkedList(const vector&lt;int&gt;&amp; v) {\n    if (v.empty()) {\n        return nullptr;\n    }\n\n    ListNode* front = new ListNode(v[0], nullptr);\n    ListNode* tmp = front;\n    for (int i = 1; i &lt; v.size(); i++) {\n        tmp-&gt;next = new ListNode(v[i], nullptr);\n        tmp = tmp-&gt;next;    \n    }\n    return front;\n}\n</code></pre>"},{"location":"lec13-15_linked_lists/#size","title":"size()","text":"<pre><code>int size(ListNode* first) {\n    int size = 0;\n    ListNode* tmp = first;\n    while (tmp != nullptr) {\n        size++;\n        tmp = tmp-&gt;next;\n    }\n    return size;\n}\n</code></pre> <pre><code>int size(ListNode* first) {\n    if (first == nullptr) {\n        return 0;\n    }\n\n    return 1 + size(first-&gt;next);\n}\n</code></pre>"},{"location":"lec13-15_linked_lists/#print","title":"print()","text":"<pre><code>void print(ListNode* first) {\n    ListNode* tmp = first;\n    while (tmp != nullptr) {\n        cout &lt;&lt; tmp-&gt;data &lt;&lt; \" -&gt; \";\n        tmp = tmp-&gt;next;\n    }\n    cout &lt;&lt; \"nullptr\" &lt;&lt; endl;\n}\n</code></pre>"},{"location":"lec13-15_linked_lists/#get","title":"get()","text":"<pre><code>int get(ListNode* first, int index) {\n    ListNode* tmp = first;\n    for (int i = 0; i &lt; index; i++) {\n        tmp = tmp-&gt;next;\n    }\n    return tmp-&gt;data;\n}\n</code></pre> <pre><code>int get(ListNode* first, int index) {\n    if (index == 0) {\n        return first-&gt;data;\n    }\n\n    return get(first-&gt;next, index - 1);\n}\n</code></pre> <p><code>Shift + Ctrl + R</code>rename</p>"},{"location":"lec13-15_linked_lists/#addlast","title":"addLast()","text":"<pre><code>void add(ListNode*&amp; first, int n) {\n    ListNode* newNode = new ListNode(n);\n    if (first == nullptr) {\n        first = newNode;\n        return;\n    }\n\n    ListNode* tmp = first;\n    while (tmp-&gt;next != nullptr) {\n        tmp = tmp-&gt;next;\n    }\n    tmp-&gt;next = newNode;\n}\n</code></pre>"},{"location":"lec13-15_linked_lists/#addfirst","title":"addFirst()","text":"<pre><code>void addFirst(ListNode*&amp; first, int n) {\n    ListNode* newNode = new ListNode(n);\n    newNode-&gt;next = first;\n    first = newNode;\n\n    // or: \n    // first = new ListNode(n, first);\n}\n</code></pre>"},{"location":"lec13-15_linked_lists/#removefirst","title":"removeFirst()","text":"<pre><code>void removeFirst(ListNode*&amp; first) {\n    if (first != nullptr) {\n        ListNode* trash = first;\n        first = first-&gt;next;\n        delete trash;\n    }\n}\n</code></pre> <p>[!note]</p>"},{"location":"lec13-15_linked_lists/#delete","title":"delete","text":"<p>\u5728C++\u4e2d\uff0c\u5982\u679c\u4e00\u5757\u5185\u5b58\u6ca1\u6709\u6307\u9488\u6307\u5411\uff0c\u8fd9\u5757\u5185\u5b58\u5728\u7a0b\u5e8f\u8fd0\u884c\u7ed3\u675f\u524d\u90fd\u65e0\u6cd5\u518d\u4f7f\u7528\uff08C++\u4e0d\u4f1a\u56de\u6536\uff09\uff0c\u9020\u6210\u5185\u5b58\u6cc4\u6f0f\u3002\u6240\u4ee5\u9700\u8981\u624b\u52a8<code>delete</code>\u7ba1\u7406\u5185\u5b58\u3002<code>delete trash</code>\u4f1a\u5220\u9664\u6307\u9488\u6307\u5411\u7684\u90a3\u5757\u5728**\u5806**\u4e0a\u7684\u5185\u5b58\uff0c\u800c\u6307\u9488\u672c\u8eab\u5b58\u50a8\u5728\u51fd\u6570\u7684\u5c40\u90e8\u53d8\u91cf**\u6808**\u4e0a\uff0c\u6808\u4e0a\u7684\u5185\u5b58\u4f1a\u5728\u51fd\u6570\u8fd4\u56de\u65f6\u88ab\u6e05\u7406\u6389\u3002</p> <p>\u8bb0\u5f97\u5728Java\u91cc\u5220\u9664\u94fe\u8868\u5934\u8282\u70b9\u53ea\u9700\u4e00\u884c<code>first = first.next</code>\u5c31\u53ef\u4ee5\u4e86\uff0c\u56e0\u4e3a\u50cfJava\u3001Python\u3001C#\u3001JavaScript\u3001Ruby\u7b49\u90fd\u4f1a\u81ea\u52a8\u7ba1\u7406\u5185\u5b58\uff0c\u6ca1\u6709\u6307\u9488\u6307\u5411\u7684\u5185\u5b58\u5757\u4f1a\u81ea\u52a8\u88ab\u56de\u6536\u3002</p>"},{"location":"lec13-15_linked_lists/#remove","title":"remove()","text":"<pre><code>void remove(ListNode*&amp; first, int index) {\n    if (first == nullptr) {\n        throw \"Cannot remove of empty list :(\";\n    }\n\n    if (index == 0) {\n        ListNode* trash = first;\n        first = first-&gt;next;\n        delete trash;\n    } else {\n        ListNode* tmp = first;\n        for (int i = 0; i &lt; index - 1; i++) {\n            tmp = tmp-&gt;next;\n        }\n        ListNode* trash = tmp-&gt;next;\n        tmp-&gt;next = tmp-&gt;next-&gt;next;\n        delete trash;\n    }   \n}\n</code></pre>"},{"location":"lec13-15_linked_lists/#insert","title":"insert()","text":"<pre><code>void insert(ListNode*&amp; first, int index, int value) {\n    if (index == 0) {\n        front = new ListNode(value, front);\n        return;\n    }\n\n    ListNode* tmp = first;\n    for (int i = 0; i &lt; index - 1; i++) {\n        tmp = tmp-&gt;next;\n    }\n    tmp-&gt;next = new ListNode(value, tmp-&gt;next);\n}\n</code></pre>"},{"location":"lec13-15_linked_lists/#linkedintlist","title":"\u5b9e\u73b0LinkedIntList\u7c7b","text":"<p>\u5b66\u5b8cLec16-17\u540e\u5b9e\u73b0\u94fe\u8868\u7c7b</p>"},{"location":"lec13-15_linked_lists/#_2","title":"\u5934\u6587\u4ef6","text":"<ol> <li> <p>ListNode.h <pre><code>#ifndef LISTNODE_H\n#define LISTNODE_H\n\nstruct ListNode {\n    int data;           // element stored in each node\n    ListNode* next;   // pointer to the next node (nullptr if none)\n\n    ListNode(const int d = 0, ListNode* n = nullptr) {\n        data = d;\n        next = n;\n    }\n};\n\n#endif\n</code></pre></p> </li> <li> <p>LinkedIntList.h <pre><code>#ifndef LINKEDINTLIST_H\n#define LINKEDINTLIST_H\n\n#include \"ListNode.h\"\n#include &lt;iostream&gt;\nusing namespace std;\n\nclass LinkedIntList {\npublic:\n    // constructor &amp; destructor\n    LinkedIntList();\n    ~LinkedIntList();\n\n    // public member functions\n    void add(int value); // addLast\n    void addFront(int value);\n    int get(int index) const;\n    void insert(int index, int value);\n    bool isEmpty() const;\n    void removeFront();\n    void removeBack();\n    void remove(int index);\n    int size() const;\n\n    // friend\n    friend ostream&amp; operator &lt;&lt;(ostream&amp; out, const LinkedIntList&amp; list);\n\nprivate:\n    // private member variables\n    ListNode* front;\n    int length;\n};\n\n// operator overload\nostream&amp; operator &lt;&lt;(ostream&amp; out, const LinkedIntList&amp; list);\n\n#endif\n</code></pre></p> </li> </ol>"},{"location":"lec13-15_linked_lists/#_3","title":"\u5b9e\u73b0\u6587\u4ef6","text":"<p>LinkedIntList.cpp</p> <pre><code>#include \"LinkedIntList.h\"\n#include &lt;iostream&gt;\nusing namespace std;\n\n// constructor &amp; destructor\nLinkedIntList::LinkedIntList() {\n    front = nullptr;\n    length = 0;\n}\n\nLinkedIntList::~LinkedIntList() {\n    ListNode* curr = front;\n    while (curr != nullptr) {\n        ListNode* nextNode = curr-&gt;next;\n        delete curr;\n        curr = nextNode;\n    }\n}\n\n// member functions\nvoid LinkedIntList::add(int value) {\n    length++;\n    if (front == nullptr) {\n        front = new ListNode(value);\n        return;\n    }\n\n    ListNode* curr = front;\n    while (curr-&gt;next != nullptr) {\n        curr = curr-&gt;next;\n    }\n    curr-&gt;next = new ListNode(value);\n}\n\nvoid LinkedIntList::addFront(int value) {\n    length++;\n    front = new ListNode(value, front);\n}\n\nint LinkedIntList::get(int index) const {\n    ListNode* curr = front;\n    for (int i = 0; i &lt; index; i++) {\n        curr = curr-&gt;next;\n    }\n    return curr-&gt;data;\n}\n\nvoid LinkedIntList::insert(int index, int value) {\n    length++;\n    if (index == 0) {\n        front = new ListNode(value, front);\n        return;\n    }\n\n    ListNode* curr = front;\n    for (int i = 0; i &lt; index - 1; i++) {\n        curr = curr-&gt;next;\n    }\n    curr-&gt;next = new ListNode(value, curr-&gt;next);\n}\n\nbool LinkedIntList::isEmpty() const {\n    return front == nullptr;\n}\n\nvoid LinkedIntList::removeFront() {\n    if (front != nullptr) {\n        ListNode* trash = front;\n        front = front-&gt;next;\n        delete trash;\n        length--;\n    } else {\n        throw \"Cannot remove front of empty list :(\";\n    }\n}\n\nvoid LinkedIntList::removeBack() {\n    if (front == nullptr) {\n        throw \"Cannot remove back of empty list :(\";\n    } else {\n        remove(length - 1);\n    }\n}\n\nvoid LinkedIntList::remove(int index) {\n    if (index == 0) {\n        removeFront();\n        return;\n    }\n\n    ListNode* curr = front;\n    for (int i = 0; i &lt; index - 1; i++) {\n        curr = curr-&gt;next;\n    }\n    ListNode* trash = curr-&gt;next;\n    curr-&gt;next = trash-&gt;next;\n    delete trash;\n    length--;\n}\n\nint LinkedIntList::size() const {\n    return length;\n}\n\n// operator overload\nostream&amp; operator &lt;&lt;(ostream&amp; out, const LinkedIntList&amp; list) {\n    ListNode* curr = list.front;\n    while (curr != nullptr) {\n        out &lt;&lt; curr-&gt;data &lt;&lt; \" \";\n        curr = curr-&gt;next;\n    }\n    return out;\n}\n</code></pre> <p>\u5b98\u65b9\u6790\u6784\u51fd\u6570\u5b9e\u73b0\uff1a <pre><code>template &lt;typename T&gt;\nLinkedListClass&lt;T&gt;::~LinkedListClass() {\n\u00a0 \u00a0 clear();\n}\n\ntemplate &lt;typename T&gt;\nvoid LinkedListClass&lt;T&gt;::clear() {\n\u00a0 \u00a0 deleteListStartingAt(front);\n\u00a0 \u00a0 front = nullptr;\n\u00a0 \u00a0 currSize = 0;\n}\n\ntemplate &lt;typename T&gt;\nvoid LinkedListClass&lt;T&gt;::deleteListStartingAt(ListNode&lt;T&gt; *node) {\n\u00a0 \u00a0 if (node == nullptr) return;\n\u00a0 \u00a0 deleteListStartingAt(node-&gt;next);\n\u00a0 \u00a0 delete node;\n}\n</code></pre></p>"},{"location":"lec13-15_linked_lists/#_4","title":"\u5ba2\u6237\u7aef\u6587\u4ef6","text":"<p>main.cpp</p> <pre><code>#include &lt;iostream&gt;\n#include \"console.h\"\n#include \"LinkedIntList.h\"\nusing namespace std;\n\nint main() {\n    LinkedIntList myList;\n    myList.add(42);\n    myList.add(-3);\n    myList.add(17);\n    myList.add(9);\n\n    myList.addFront(888);\n\n    cout &lt;&lt; \"After adds:\" &lt;&lt; endl;\n    cout &lt;&lt; \"List: \" &lt;&lt; myList &lt;&lt; endl;\n    cout &lt;&lt; \"Size: \" &lt;&lt; myList.size() &lt;&lt; endl;\n\n    myList.removeFront();\n    myList.removeBack();\n\n    cout &lt;&lt; \"After removes:\" &lt;&lt; endl;\n    cout &lt;&lt; \"List: \" &lt;&lt; myList &lt;&lt; endl;\n    cout &lt;&lt; \"Size: \" &lt;&lt; myList.size() &lt;&lt; endl;\n}\n</code></pre>"},{"location":"lec16-17_classes/","title":"Lec16-17_Classes","text":"<p>\ud83d\udcbb\u8bfe\u540e\u7ec3\u4e60\uff1a - [x] 1. Circle   - \u5934\u6587\u4ef6\u548c\u5b9e\u73b0\u6587\u4ef6\u5206\u5f00\u5199\u5f53\u7136\u597d\uff0c\u4f46\u8fd9\u79cd\u7b54\u9898\u90fd\u662f\u653e\u5728\u4e00\u8d77\u7684\uff0c\u522b\u5199\u4e60\u60ef\u4e86\u641e\u5fd8\u4e86:0 - [x] 2. Date   - \u7528\u5230\u4e86\u6211\u8ba8\u538c\u7684ostringstream :(</p> <ul> <li>\u5728C++\u4e2d\u7f16\u5199\u7c7b\uff0c\u5305\u542b<code>.h</code>\u4e0e<code>.cpp</code>\u4e24\u4e2a\u6587\u4ef6</li> </ul>"},{"location":"lec16-17_classes/#h","title":"\u5934\u6587\u4ef6.h","text":"<p><pre><code>#ifndef _classname_h\n#define _classname_h\n\nclass classname {\npublic:\n    // \u6784\u9020\u51fd\u6570\u58f0\u660e\n\n    // \u516c\u6709\u51fd\u6570\u58f0\u660e\n\nprivate:\n    // \u79c1\u6709\u6210\u5458\u53d8\u91cf\u58f0\u660e\n};\n\n#endif\n</code></pre> </p> <p>\u5199\u4e00\u4e2a\u793a\u4f8b\uff1a <pre><code>// BankAccount.h\n#ifndef _bankaccount_h\n#define _bankaccount_h\n\n#include &lt;iostream&gt;\n#include &lt;string&gt;\nusing namespace std;\n\nclass BankAccount {\npublic:\n    BankAccount(string n, double bal = 0.00);\n    ~BankAccount();\n    void deposit(double amount);\n    void withdraw(double amount);\n    string getName() const;\n    double getBalance() const;\n\n    // friend\n    friend bool operator ==(const BankAccount&amp; ba1, const BankAccount&amp; ba2);\n    friend bool operator !=(const BankAccount&amp; ba1, const BankAccount&amp; ba2);\nprivate:\n    string name;\n    double balance;\n};\n\nbool operator ==(const BankAccount&amp; ba1, const BankAccount&amp; ba2);\nbool operator !=(const BankAccount&amp; ba1, const BankAccount&amp; ba2);\n\nostream&amp; operator &lt;&lt;(ostream&amp; out, const BankAccount&amp; ba);\n</code></pre></p>"},{"location":"lec16-17_classes/#cpp","title":"\u5b9e\u73b0\u6587\u4ef6.cpp","text":"<p>\u5199\u4e00\u4e2a\u793a\u4f8b\uff1a <pre><code>// BankAccoount.cpp\n#include \"bankaccount.h\"\n\n// \u6784\u9020\u51fd\u6570\u5b9e\u73b0\nBankAccount::BankAccount(string n, double bal) {\n    if (bal &lt; 0) {\n        throw bal;\n    }\n    name = n;\n    balance = bal;\n}\n\n// \u6790\u6784\u51fd\u6570\u5b9e\u73b0\nBankAccount::~BankAccount() {\n    cout &lt;&lt; \"destructor called for \" &lt;&lt; *this &lt;&lt; endl;\n}\n\n// \u6210\u5458\u51fd\u6570\u5b9e\u73b0\nvoid BankAccount::deposit(double amount) {\n    if (amount &gt;= 0.00) {\n        balance += amount;\n    }\n    // this-&gt;balance\n}\n\nvoid BankAccount::withdraw(double amount) {\n    if (balance &gt;= amount &amp;&amp; amount &gt;= 0.00) {\n        balance -= amount;\n    }\n}\n\nstring BankAccount::getName() const{\n    return name;\n}\n\ndouble BankAccount::getBlance() const{\n    return balance;\n}\n\n// \u64cd\u4f5c\u7b26\u91cd\u8f7d\nbool operator ==(const BankAccount&amp; ba1, const BankAccount&amp; ba2) {\n    return ba1.name == ba2.name &amp;&amp; ba1.balance == ba2.balance;\n}\n\nbool operator !=(const BankAccount&amp; ba1, const BankAccount&amp; ba2) {\n    return !(ba1 == ba2);\n}\n\nostream&amp; operator &lt;&lt;(ostream&amp; out, const BankAccount&amp; ba) {\n    out &lt;&lt; ba.getName() &lt;&lt; \", \" &lt;&lt; \"$\" &lt;&lt; ba.getBalance();\n    return out;\n}\n</code></pre></p>"},{"location":"lec16-17_classes/#cpp_1","title":"\u5ba2\u6237\u7aef\u6587\u4ef6.cpp","text":"<pre><code>#include \"bankaccount.h\"\nusing namespace std;\n\nint main() {\n    BankAccount ba1(\"Meng\");\n    ba1.deposit(3.00); // m -&gt; 3 :)\n    cout &lt;&lt; \"My balance is \" &lt;&lt; ba1.getBalance() &lt;&lt; endl;\n\n    BankAccount ba2(\"Ju\", 7.00); // J -&gt; 7 :D\n\n    // \u64cd\u4f5c\u7b26\u91cd\u8f7d\n    if (ba1 != ba2) {\n        cout &lt;&lt; \":P\" &lt;&lt; endl;\n    }\n    if (ba1 == ba1) {\n        cout &lt;&lt; \":)\" &lt;&lt; endl;\n    }\n\n    cout &lt;&lt; \"ba1 is: \" &lt;&lt; ba1 &lt;&lt; endl;\n    cout &lt;&lt; \"ba2 is: \" &lt;&lt; ba2 &lt;&lt; endl;\n}\n</code></pre>"},{"location":"lec16-17_classes/#const","title":"const","text":"<p> \u58f0\u660e\u4e86const\u7684\u6210\u5458\u51fd\u6570\uff0c\u8868\u793a\u51fd\u6570\u4e0d\u80fd\u4fee\u6539\u5bf9\u8c61\u7684\u5b57\u6bb5\uff08\u7c7b\u4e2d\u7684\u6210\u5458\u51fd\u6570\u624d\u628aconst\u653e\u5728\u6700\u540e\uff0c\u5982\u679c\u662f\u5168\u5c40\u51fd\u6570\u4e0d\u9700\u8981\uff09</p>"},{"location":"lec16-17_classes/#_1","title":"\u64cd\u4f5c\u7b26\u91cd\u8f7d","text":"<p> <pre><code>// .h\n#include &lt;iostream&gt;\n...\nostream&amp; operator &lt;&lt;(ostream&amp; out, const BankAccount&amp; ba);\n// .cpp\nostream&amp; operator &lt;&lt;(ostream&amp; out, const BankAccount&amp; ba) {\n    out &lt;&lt; ba.getName() &lt;&lt; \", \" &lt;&lt; \"$\" &lt;&lt; ba.getBalance();\n    return out;\n}\n</code></pre></p>"},{"location":"lec16-17_classes/#destructor","title":"\u6790\u6784\u51fd\u6570destructor","text":""},{"location":"lec18_arrays/","title":"Lec18_Arrays","text":"<p>\u80fd\u81ea\u5df1\u5199\u51fa\u6574\u4e2aArrayStack\u7c7b\u5b9e\u73b0\u8fd9\u8bb2\u5c31\u7b97\u7ed3\u675f</p> <p>\u58f0\u660e\u6570\u7ec4\uff1a <pre><code>type* name = new type[length]; // uninitialized\ntype* name = new type[length](); // initialize to 0\n\nint* a = new int[3];\nint* a2 = new int[3]();\n</code></pre></p> <p>[!note] vector\u5185\u90e8\u5b9e\u73b0\uff1aint size + int capacity + array</p>"},{"location":"lec18_arrays/#arraystack","title":"\u5b9e\u73b0ArrayStack\u7c7b","text":"<pre><code>// arraystack.h\n#ifndef _arraystack_h\n#define _arraystack_h\n\n#include &lt;iostream&gt;\nusing namespace std;\n\nclass ArrayStack {\npublic:\n    ArrayStack();\n    ~ArrayStack();\n\n    void push(int n);\n    int pop();\n    int peek() const;\n    bool isEmpty() const;\n\n    friend ostream&amp; operator &lt;&lt;(ostream&amp; out, const ArrayStack&amp; stack);\n\nprivate:\n    int size;\n    int capacity;\n    int* elements;\n\n    ArrayStack(const ArrayStack&amp; other);\n    ArrayStack&amp; operator =(const ArrayStack&amp; other);\n};\n\nostream&amp; operator &lt;&lt;(ostream&amp; out, const ArrayStack&amp; stack);\n\n#endif\n</code></pre> <pre><code>// arraystack.cpp\n#include \"arraystack.h\"\n\nArrayStack::ArrayStack() {\n    size = 0;\n    capacity = 10;\n    elements = new int[capacity]();\n}\n\nArrayStack::~ArrayStack() {\n    delete[] elements;\n}\n\nvoid ArrayStack::push(int n) {\n    if (size &gt;= capacity) {\n        int* bigger = new int[capacity * 2];\n        for (int i = 0; i &lt; size; i++) {\n            bigger[i] = elements[i];\n            delete[] elements;\n            elements = bigger;\n            capacity *= 2;\n        }\n    }\n    elements[size] = n;\n    size++;\n}\n\nint ArrayStack::pop() {\n    if (isEmpty()) {\n        throw \"Empty stack!\";\n    }\n    int result = elements[size - 1];\n    size--;\n    return result;\n}\n\nint ArrayStack::peek() const {\n    if (isEmpty()) {\n        throw \"Empty stack!\";\n    }\n    return elements[size - 1];\n}\n\nbool ArrayStack::isEmpty() const {\n    return size == 0;\n}\n\nostream&amp; operator &lt;&lt;(ostream&amp; out, const ArrayStack&amp; stack) {\n    out &lt;&lt; \"{\";\n    if (!stack.isEmpty()) {\n        out &lt;&lt; stack.elements[0];\n        for (int i = 1; i &lt; size; i++) {\n            out &lt;&lt; \", \" &lt;&lt; stack.elements[i];\n        }\n    }\n    out &lt;&lt; \"}\";\n    return out;\n}\n</code></pre> <pre><code>// stack_client.cpp\n</code></pre>"},{"location":"lec18_arrays/#_1","title":"\u6d45\u62f7\u8d1d\u95ee\u9898","text":"<p> - copy constructor - = operator overload <pre><code>...\nprivate:\n    ArrayStack(const ArrayStack&amp; other);\n    ArrayStack&amp; operator =(const ArrayStack&amp; other);\n</code></pre></p>"},{"location":"lec18_arrays/#template","title":"template","text":"<p>\u8bb2\u5ea7\u6ca1\u65f6\u95f4\u8bb2\uff0c\u770b18\u5e74\u7684PPT</p>"},{"location":"lec19-21_trees/","title":"Lec19-21_Trees","text":"<ul> <li>Lec19 \u4e8c\u53c9\u6811</li> <li>Lec20 \u4e8c\u53c9\u641c\u7d22\u6811</li> <li>Lec21 Advanced Trees</li> <li>\u5e73\u8861\u6811<ul> <li>ALV\u6811</li> <li>\u7ea2\u9ed1\u6811</li> <li>\u4f38\u5c55\u6811</li> </ul> </li> <li>\u5b57\u5178\u6811Tries</li> </ul> <p>\u770b\u89c6\u9891\u6548\u7387\u592a\u4f4e\u4e86\uff0c\u4e5f\u8bb2\u4e0d\u4e86\u591a\u5c11\u4e1c\u897f\u3002\u4ee5\u540e\u76f4\u63a5\u770bPPT\uff0c\u4e0d\u61c2\u7684\u5730\u65b9\u95eeGPT 1. print 2. size 3. contains 4. getMin 5. getMax 6. add 7. remove</p> <pre><code>struct TreeNode {\n    int data;\n    TreeNode* left;\n    TreeNode* right;\n\n    TreeNode(int d = 0, TreeNode* l = nullptr, TreeNode* r = nullptr) {\n        data = d;\n        left = l;\n        right = r;\n    }\n}\n</code></pre> <p>[!note] \u53ef\u4ee5\u5728\u6784\u9020\u51fd\u6570\u6dfb\u52a0*\u6210\u5458\u521d\u59cb\u5316\u5217\u8868*\uff1a <pre><code>TreeNode(int d = 0, TreeNode* l = nullptr, TreeNode* r = nullptr)\n  : data(d), left(l), right(r) {}\n</code></pre> \u4e5f\u53ef\u4ee5\u5206\u5f00\u5199\u591a\u4e2a\u6784\u9020\u51fd\u6570\uff0c\u53ef\u8bfb\u6027\u66f4\u597d\uff1a <pre><code>// \u65e0\u53c2\u6570\nTreeNode() : data(0), left(nullptr), right(nullptr) {}\n// \u4e00\u4e2a\u53c2\u6570\u7684\u6784\u9020\u51fd\u6570\nTreeNode(int d) : data(d), left(nullptr), right(nullptr) {}\n// \u4e09\u4e2a\u53c2\u6570\nTreeNode(int d, TreeNode* l, TreeNode* r) \n  : data(d), left(l), right(r) {}\n</code></pre></p>"},{"location":"lec19-21_trees/#1-print","title":"1. print","text":"<p>\u524d\u3001\u4e2d\u3001\u540e\u5e8f\u904d\u5386 <pre><code>void print(TreeNode* node) {\n    if (node != nullptr) {\n        // pre-order\n        cout &lt;&lt; node-&gt;data &lt;&lt; endl;\n        print(node-&gt;left);\n        // in-order\n        print(node-&gt;right);\n        // post-order\n    }\n}\n</code></pre></p>"},{"location":"lec19-21_trees/#2-size","title":"2. size","text":"<pre><code>void size(TreeNode* node) {\n    if (node == nullptr) {\n        return 0;\n    }\n    return 1 + size(node-&gt;left) + size(node-&gt;right);\n}\n</code></pre>"},{"location":"lec19-21_trees/#3-contains","title":"3. contains","text":"<pre><code>bool contains(TreeNode* node, int value) {\n    if (node != nullptr) {\n        if (node-&gt;data == value) {\n            return true;\n        }\n        if (contains(node-&gt;left, value) ||\n            contains(node-&gt;right, value)) {\n            return true;    \n        }\n    }\n    return false;\n}\n</code></pre> <p>\u8fdb\u4e00\u6b65\uff0c\u5f53\u662f**\u4e8c\u53c9\u641c\u7d22\u6811**\u65f6 - BSTs   1. \u904d\u5386Traversing       - contains       - getMin/getMax   2. \u6dfb\u52a0Adding   3. \u5220\u9664Removing </p> <pre><code>bool contains(TreeNode* node, int value) {\n    if (node != nullptr) {\n        if (value == node-&gt;data) {\n            return true;\n        } else if (value &lt; node-&gt;data) {\n            return contains(node-&gt;left, value);\n        } else {\n            return contains(node-&gt;right, value);\n        } \n    }\n    return false;\n}\n</code></pre>"},{"location":"lec19-21_trees/#4-getmin","title":"4. getMin","text":"<pre><code>// Recursion\nint getMin(TreeNode* root) {\n    if (root-&gt;left == nullptr) {\n        return root-&gt;data;\n    } else {\n        return getMin(root-&gt;left);\n    }\n}\n\n// Iteration\nint getMin(TreeNode* root) {\n    while (root-&gt;left != nullptr) {\n        root = root-&gt;left; // \u6ca1\u6709\u6309\u5f15\u7528\u4f20\u9012\uff0c\u6539\u53d8\u7684\u662f\u526f\u672c\u6ca1\u5173\u7cfb\n    }\n    return root-&gt;data;\n}\n</code></pre>"},{"location":"lec19-21_trees/#5-getmax","title":"5. getMax","text":"<pre><code>int getMax(TreeNode* root) {\n    if (root-&gt;right == nullptr) {\n        return root-&gt;data;\n    } else {\n        return getMax(root-&gt;right);\n    }\n}\n</code></pre>"},{"location":"lec19-21_trees/#6-add","title":"6. add","text":"<pre><code>void add(TreeNode*&amp; node, int value) {\n    // Base case\n    if (node == nullptr) {\n        node = new TreeNode(value);\n        return;\n    }\n    // Recursive case\n    if (value &lt; node-&gt;data) {\n        add(node-&gt;left, value);\n    } else if (value &gt; node-&gt;data) {\n        add(node-&gt;right, value);\n    }\n}\n</code></pre> <p>[!important] \u6ce8\u610f\u6309\u5f15\u7528\u4f20\u9012\u3002</p>"},{"location":"lec19-21_trees/#remove","title":"remove","text":"<pre><code>void remove(TreeNode*&amp; node, int value) {\n    if (node == nullptr) {\n        return;\n    }\n\n    if (value &lt; node-&gt;data) {\n        remove(node-&gt;left, value);\n    } else if (value &gt; node-&gt;data) {\n        remove(node-&gt;right, value);\n    } else {\n        // case1: leaf\n        if (node-&gt;left == nullptr &amp;&amp; node-&gt;right == nullptr) {\n            delete node;\n            node = nullptr;\n        } else if (node-&gt;right == nullptr) {\n            // case2: only left subtree\n            TreeNode* trash = node;\n            node = node-&gt;left;\n            delete trash;\n        } else if (node-&gt;left == nullptr) {\n            // case2: only right subtree\n            TreeNode* trash = node;\n            node = node-&gt;right;\n            delete trash;\n        } else {\n            // case3: full tree\n            int minValue = getMin(node-&gt;right);\n            node-&gt;data = minValue;\n            remove(node-&gt;right, minValue);\n        }\n    }\n}\n</code></pre>"},{"location":"lec19-21_trees/#free-tree","title":"Free Tree","text":"<p>\u7528\u540e\u5e8f\u904d\u5386\u3002delete\u5f53\u524d\u8282\u70b9\u524d\uff0c\u9700\u8981\u5148\u4fdd\u8bc1\u5de6\u53f3\u5b50\u6811\u5df2\u7ecf\u5168\u90e8delete</p>"},{"location":"lec19-21_trees/#tries","title":"Tries","text":""},{"location":"lec19-21_trees/#containsprefix","title":"containsPrefix","text":"<p>\u5b57\u5178\u6811</p> <pre><code>bool containsPrefix(TreeNode* node, string prefix) {\n    if (node == nullptr) {\n        return false;\n    } else if (prefix == \"\") {\n        return true;\n    } else {\n        char cur = prefix[0];\n        int index = cur - 'a';\n        return containsPrefix(node-&gt;children[index], prefix.substr(1));\n    }\n}\n</code></pre> <p>\u611f\u89c9\u8fd8\u6709\u66f4\u597d\u7684\u5199\u6cd5......</p>"},{"location":"lec22-25_graphs/","title":"Lec22-25_Graphs","text":"<p>[!note] DFS\u4f1a\u5411\u6df1\u5904\u9012\u5f52\uff0cBFS\u5c06\u5f53\u524d\u8282\u70b9\u7684neighbors\u653e\u5165\u961f\u5217\u4e2d\uff0c\u4e00\u5c42\u4e00\u5c42\u5f80\u4e0b\u904d\u5386\uff0c\u56e0\u6b64\u80fd\u5f97\u5230**\u65e0\u6743\u56fe**\u4e2d\u4e00\u4e2a\u8282\u70b9\u5230\u5176\u4ed6\u8282\u70b9\u7684**\u6700\u77ed\u8def\u5f84**\u3002\u4f46\u5982\u679c\u8def\u5f84\u5e26\u6743\uff0cBFS\u65e0\u6cd5\u5f97\u5230\u5b9e\u9645\u4e0a\u7684\u6700\u77ed\u8def\u5f84......</p> <p>Dijkstra\u7b97\u6cd5**\u89e3\u51b3\u5728**\u52a0\u6743\u56fe**\u4e2d\u7684\u6700\u77ed\u8def\u5f84\u95ee\u9898\u3002\u4f7f\u7528\u7684\u662f**\u4f18\u5148\u961f\u5217\u3002</p> <p>\u65e0\u6743\u56fe\u4e2d\uff0cDijkstra\u7b97\u6cd5\u57fa\u672c\u4e0a\u548cBFS\u76f8\u540c\u3002\u65e0\u6743\u56fe\u53ef\u4ee5\u89c6\u4e3a\u6240\u6709\u8fb9\u7684\u6743\u91cd\u90fd\u76f8\u540c\uff08\u6bd4\u5982\u90fd\u4e3a0\u62161\uff09\uff0cDijkstra\u627e\u5230\u7684\u6743\u91cd\u6700\u5c0f\u7684\u8def\u5f84\u5b9e\u9645\u4e0a\u5c31\u662f\u957f\u5ea6\u6700\u5c0f\u7684\u8def\u5f84\uff08BFS\uff09</p> <p>Dijkstra\u5f88\u597d\uff0c\u4f46\u5b83\u662f\u5411\u5404\u4e2a\u65b9\u5411\u63a2\u7d22\u8def\u5f84\uff0c\u5982\u679c\u6211\u4eec\u641c\u7d22\u8def\u5f84\u65f6\u660e\u786e\u76ee\u6807\u65b9\u5411\u5462\uff1f\uff08\u5982\u76ee\u6807\u70b9\u5728\u4e1c\uff09</p> <p>**A*\u7b97\u6cd5**\u57fa\u4e8eDijkstra\u7b97\u6cd5\uff0c\u5728\u8def\u5f84\u63a2\u7d22\u4f18\u5148\u7ea7\u7684\u8ba1\u7b97\u4e2d\u52a0\u4e0a**\u542f\u53d1\u5f0f**\u6210\u672c\uff1a $$a - -&gt; b - -&gt; c$$ $$priority (b) = cost (a, b) + Heuristic (b, c)$$ \u4f18\u5148\u63a2\u7d22\u90a3\u4e9b\u4f30\u8ba1\u603b\u6210\u672c\u66f4\u4f4e\u7684\u8def\u5f84\u3002</p> <p>\u6700\u5c0f\u751f\u6210\u6811\uff1a\u5728\u4e00\u4e2a\u5e26\u6743\u8fde\u901a\u65e0\u5411\u56fe\u4e2d\uff0c\u627e\u5230\u4e00\u68f5\u5305\u542b\u6240\u6709\u9876\u70b9\u4e14\u8fb9\u6743\u4e4b\u548c\u6700\u5c0f\u7684\u6811</p> <p>Kruskal\u7b97\u6cd5\uff1a</p> <p>\u62d3\u6251\u6392\u5e8f\uff1a - \u5728\u6709\u5411\u65e0\u73af\u56fe\uff08DAG\uff09\u4e2d\uff0c\u5bf9\u4e8e\u56fe\u4e2d\u7684\u4efb\u610f\u4e00\u6761\u6709\u5411\u8fb9<code>(u, v)</code>\uff0c\u9876\u70b9<code>u</code>\u5728\u6392\u5e8f\u4e2d\u90fd\u51fa\u73b0\u5728\u9876\u70b9<code>v</code>\u4e4b\u524d\u3002 - \u7ed3\u5408\u201c\u8bfe\u7a0b\u5148\u4fee\u8981\u6c42\u201d\u7684\u4f8b\u5b50\u7406\u89e3\u3002 - **\u6709\u5411\u65e0\u73af**\u56fe\u91cc\u5fc5\u7136\u5b58\u5728\u4e00\u4e9b\u5165\u5ea6\u4e3a 0 \u7684\u9876\u70b9\uff0c\u8fd9\u4e9b\u9876\u70b9\u6ca1\u6709\u524d\u9a71\u8282\u70b9\uff0c\u53ef\u4ee5\u4f5c\u4e3a\u6392\u5e8f\u7684\u8d77\u59cb\u70b9\u3002 - \u62d3\u6251\u6392\u5e8f\u8868\u793a\u7684\u662f\u9876\u70b9\u4e4b\u95f4\u7684\u4f9d\u8d56\u5173\u7cfb\u3002</p>"},{"location":"lec26_inheritance/","title":"Lec26_Inheritance","text":""},{"location":"lec27_hashing/","title":"Lec27_Hashing","text":"<p>[!note]</p>"},{"location":"lec28_sorting/","title":"Lec28_Sorting","text":"<p>[!note] - bogo sort - selection sort - insertion sort - merge sort - TimSort - quick sort</p>"},{"location":"lec28_sorting/#selection_sort","title":"Selection_sort","text":"<pre><code>void selectionSort(vector&lt;int&gt;&amp; v) {\n    for (int i = 0; i &lt; v.size() - 1; i++) {\n        int min = i;\n        for (int j = i + 1; j &lt; v.size(); j++) {\n            if (v[j] &lt; v[min]) {\n                min = j;\n            }\n        }\n\n        if (min != i) {\n            int tmp = v[i];\n            v[i] = v[min];\n            v[min] = tmp;\n        }\n        // swap(v[i], v[min]);\n    }\n}\n</code></pre>"},{"location":"lec28_sorting/#insertion_sort","title":"Insertion_sort","text":"<pre><code>void insertionSort(vector&lt;int&gt;&amp; v) {\n    for (int i = 1; i &lt; v.size(); i++) {\n        int cur = v[i]; // \u5f53\u524d\u8981\u63d2\u5165\u6392\u5e8f\u7684\u5143\u7d20\n        int j = i - 1;\n\n        while (j &gt;= 0 &amp;&amp; v[j] &gt; cur) {\n            v[j + 1] = v[j];\n            j--;\n        }\n        v[j + 1] = cur;\n    }\n}\n</code></pre> <p>[!note] \u9009\u62e9\u6392\u5e8f\u548c\u63d2\u5165\u6392\u5e8f\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u90fd\u662f$O(N^2)$</p>"},{"location":"lec28_sorting/#merge_sort","title":"Merge_sort","text":"<pre><code>void mergeSort(vector&lt;int&gt;&amp; v) {\n    if (v.size() &gt;= 2) {\n        // divide\n        vector&lt;int&gt; left(v.begin(), v.begin() + v.size() / 2);\n        vector&lt;int&gt; right(v.begin() + v.size() / 2, v.end());\n\n        // sort\n        mergeSort(left);\n        mergeSort(right);\n\n        // merge\n        int i1 = 0, i2 = 0;\n        for (int i = 0; i &lt; v.size(); i++) {\n            if (i2 &gt;= right.size() || \n               (i1 &lt; left.size() &amp;&amp; left[i1] &lt; right[i2])) {\n                v[i] = left[i1++];\n            } else {\n                v[i] = right[i2++];\n            }\n        }\n    } // else: base case. Do nothing.\n}\n</code></pre> <p>\u8fd9\u91cc\u6709\u5f88\u591a\u4e0d\u5fc5\u8981\u7684vector\u590d\u5236\uff0c\u6539\u4e3a\u4f20\u9012\u7d22\u5f15\u76f4\u63a5\u5728\u539f\u6570\u7ec4\u4e0a\u64cd\u4f5c\uff1a</p> <p>\u5b8c\u6574\u4ee3\u7801\uff1a</p> <pre><code>#include \"console.h\"\n#include \"simpio.h\"\n#include &lt;vector&gt;\n\nusing namespace std;\n\nvoid mergeSort(vector&lt;int&gt;&amp; v);\nvoid mergeSortHelper(vector&lt;int&gt;&amp; v, vector&lt;int&gt;&amp; tmp, int left, int right);\nvoid merge(vector&lt;int&gt;&amp; v, vector&lt;int&gt;&amp; tmp, int left, int mid, int right);\n\nint main() {\n    vector&lt;int&gt; v = {3, 10, 4, 1, 5, 0, 2, 6, 5, 3, 5};\n    mergeSort(v);\n    for (int num : v) {\n        cout &lt;&lt; num &lt;&lt; \" \";\n    }\n    cout &lt;&lt; endl;\n    return 0;\n}\n\nvoid mergeSort(vector&lt;int&gt;&amp; v) {\n    if (v.size() &lt; 2) {\n        return;\n    }\n    vector&lt;int&gt; tmp(v.size());\n    mergeSortHelper(v, tmp, 0, v.size() - 1);\n}\n\nvoid mergeSortHelper(vector&lt;int&gt;&amp; v, vector&lt;int&gt;&amp; tmp, int left, int right) {\n    if (left &lt; right) {\n        int mid = left + (right - left) / 2;\n\n        mergeSortHelper(v, tmp, left, mid);\n        mergeSortHelper(v, tmp, mid + 1, right);\n\n        merge(v, tmp, left, mid, right);\n    }\n}\n\nvoid merge(vector&lt;int&gt;&amp; v, vector&lt;int&gt;&amp; tmp, int left, int mid, int right) {\n    int i1 = left; // \u5de6\u5b50\u6570\u7ec4\u8d77\u59cb\u7d22\u5f15\n    int i2 = mid + 1; // \u53f3\u5b50\u6570\u7ec4\u8d77\u59cb\u7d22\u5f15\n    int j = left; // \u4e34\u65f6\u5b58\u653e\u7ed3\u679c\u6570\u7ec4\u8d77\u59cb\u7d22\u5f15\n\n    // \u904d\u5386\u5de6\u53f3\u5b50\u6570\u7ec4\uff0c\u6bd4\u8f83\u5927\u5c0f\uff0c\u5c0f\u7684\u653e\u5165tmp\u3002\n    // \u76f4\u5230\u4e00\u65b9\u904d\u5386\u5b8c\uff0c\u7ed3\u675f\u5faa\u73af\n    while (i1 &lt;= mid &amp;&amp; i2 &lt;= right) {\n        if (v[i1] &lt; v[i2]) {\n            tmp[j++] = v[i1++];\n        } else {\n            tmp[j++] = v[i2++];\n        }\n    }\n\n    // \u54ea\u4e2a\u6709\u5269\u5c31\u5c06\u5269\u4e0b\u7684\u5143\u7d20\u653e\u5165tmp\u6570\u7ec4\n    while (i1 &lt;= mid) {\n        tmp[j++] = v[i1++];\n    }\n    while (i2 &lt;= right) {\n        tmp[j++] = v[i2++];\n    }\n\n    // \u6b64\u65f6tmp\u6570\u7ec4\u5df2\u6392\u597d\u5e8f\uff0c\u590d\u5236\u56de\u539f\u6570\u7ec4\u5373\u53ef\n    for (int k = left; k &lt;= right; k++) {\n        v[k] = tmp[k];\n    }\n}\n</code></pre>"},{"location":"lec28_sorting/#quick_sort","title":"Quick_sort","text":"<p>[!note] \u5f52\u5e76\u6392\u5e8f\u662f\u7a33\u5b9a\u7684\u6392\u5e8f\u7b97\u6cd5\uff0c\u800c\u5feb\u901f\u6392\u5e8f\u4e0d\u7a33\u5b9a\u3002</p> <p>\u7a33\u5b9a\u6027\uff1a\u76f8\u7b49\u5143\u7d20\u7684\u76f8\u5bf9\u987a\u5e8f\u5728\u6392\u5e8f\u524d\u540e\u4e0d\u53d8</p>"},{"location":"lec29_stl/","title":"Lec29_STL","text":"<p>[!note]</p>"},{"location":"lec29_stl/#_1","title":"\u8fed\u4ee3\u5668","text":"<ol> <li>C++\u7684\u8fed\u4ee3\u5668\u4f7f\u5f97\u904d\u5386\u5404\u79cd\u5bb9\u5668\u53d8\u5f97\u7edf\u4e00\u3002\u8fed\u4ee3\u5668\u7c7b\u4f3c\u6307\u9488\uff0c\u91cd\u8f7d\u4e86<code>*</code>\u3001<code>++</code>\u7b49\u8fd0\u7b97\u7b26\u3002\u540c\u65f6STL\u63d0\u4f9b\u4e86\u5927\u91cf\u57fa\u4e8e\u8fed\u4ee3\u5668\u7684\u7b97\u6cd5<code>include &lt;algorithm&gt;</code>\uff1a<code>for_each</code>\u3001<code>find</code>\u3001<code>count</code>\u3001<code>sort</code>......</li> <li>\u7528\u8fed\u4ee3\u5668\u904d\u5386collection\u65f6\uff0c<code>++it</code>\u524d\u7f6e\u4f1a\u63d0\u9ad8\u4e00\u70b9\u70b9\u6027\u80fd\uff0c\u56e0\u4e3a\u540e\u7f6e<code>it++</code>\u9700\u8981\u5148\u8fd4\u56de\u65e7\u503c\uff0c\u518d\u589e\u52a0\u5230\u65b0\u503c\uff0c\u591a\u4e86\u4e00\u4e2a\u8fed\u4ee3\u5668\u7684\u590d\u5236\u64cd\u4f5c\u3002\u800c\u524d\u7f6e<code>++it</code>\u4f1a\u76f4\u63a5\u589e\u52a0\u5230\u65b0\u503c</li> </ol>"},{"location":"lec29_stl/#smart-pointers","title":"\u667a\u80fd\u6307\u9488(smart pointers)","text":"<ul> <li>C++11\u540e\u5f15\u5165\u4e86\u667a\u80fd\u6307\u9488\uff0c\u53ef\u4ee5\u81ea\u52a8\u7ba1\u7406\u5185\u5b58\uff0c\u800c\u4e0d\u9700\u8981\u624b\u52a8delete</li> <li><code>include &lt;memory&gt;</code>\u540e\u53ef\u4ee5\u4f7f\u7528unique_ptr\u7b49\u6a21\u677f\u7c7b</li> </ul>"},{"location":"lec2_functions/","title":"Lec2_functions","text":"<p>lec2\u8bfe\u5802\u7ec3\u4e60\uff1a</p> <ul> <li> parameterMysteryBCA</li> <li> xkcdDatingRange</li> <li> quadratic</li> <li> returnMystery1</li> <li> BMI</li> <li> stringMysteryAB</li> <li> nameDiamond</li> </ul>"},{"location":"lec2_functions/#_1","title":"\u8bfe\u5802\u5185\u5bb9","text":"<p>Important</p> <p>\u8bf4\u660e\uff1a\u6807*\u8868\u793a\u4ee5\u524d\u5b66\u8fc7\u7684</p> <ul> <li>cout</li> <li>cin // bad</li> <li>simpio.h // \u7528getInteger()\u7b49\u51fd\u6570\u4ee3\u66ffcin</li> <li>console.h // \u5c06\u63a7\u5236\u53f0\u4f5c\u4e3a\u72ec\u7acb\u7a97\u53e3\u5f39\u51fa</li> <li>\u7cfb\u7edf\u5e93\u7528\u5c16\u62ec\u53f7<code>#include &lt;iostream&gt;</code>\uff0c\u672c\u5730\u5e93\u7528\u5f15\u53f7<code>#include \"simpio.h\"</code></li> <li>\u6709\u9ed8\u8ba4\u503c\u7684\u51fd\u6570\u53c2\u6570 &gt;&gt; \u5fc5\u987b\u5728\u53c2\u6570\u5217\u8868\u672b\u5c3e<ul> <li><code>void func(int a = 1, int b);</code>\u662f\u975e\u6cd5\u7684</li> </ul> </li> <li>\u6bcf\u4e2a\u9879\u76ee\u6700\u7ec8\u53ea\u80fd\u6709\u4e00\u4e2a <code>main()</code> \u51fd\u6570\u4f5c\u4e3a\u5165\u53e3\u3002\u5982\u679c\u5e0c\u671b\u4e24\u4e2acpp\u6587\u4ef6\u5171\u540c\u5de5\u4f5c\uff0c\u5c31\u9700\u8981\u8c03\u6574\u6587\u4ef6\u903b\u8f91\uff0c\u628a\u4e00\u4e2a\u6587\u4ef6\u7684\u529f\u80fd\u62c6\u5206\u4e3a\u53ef\u8c03\u7528\u7684\u51fd\u6570\uff0c\u800c\u53e6\u4e00\u4e2a\u6587\u4ef6\u8d1f\u8d23\u7a0b\u5e8f\u5165\u53e3\u3002</li> <li>[!] \u6ce8\u610f\u5230C++\u91cc\u9762\u65e0\u53c2\u6570\u51fd\u6570\u58f0\u660e\u65f6<code>int func();</code> \u5e76\u4e0d\u50cfC\u4e2d\u4e00\u6837\u7528<code>void</code>\u663e\u5f0f\u8868\u793a\u201c\u65e0\u53c2\u6570\u201d\uff0c\u539f\u56e0\u662fC\u548cC++\u5bf9<code>()</code>\u7684\u8bed\u4e49\u89e3\u91ca\u4e0d\u540c\u3002<ol> <li>\u5728C\u4e2d\uff0c<code>int func();</code>\u8fd9\u79cd\u6ca1\u6709void\u7684\u5199\u6cd5\u88ab\u89e3\u91ca\u4e3a**\u53c2\u6570\u672a\u6307\u5b9a**\uff0c\u5373\u53ef\u4ee5\u63a5\u53d7\u4efb\u610f\u6570\u91cf\u548c\u7c7b\u578b\u7684\u53c2\u6570\uff0c<code>func(10)</code>\u7684\u8c03\u7528\u662f\u5408\u6cd5\u7684\uff0c\u6240\u4ee5\u5982\u679c\u6ca1\u6709\u53c2\u6570\u7684\u51fd\u6570\u5b9a\u4e49\u5fc5\u987b\u660e\u786e\u4f7f\u7528<code>void</code>\uff1b</li> <li>\u800c\u5728C++\u91cc\uff0c\u7a7a\u62ec\u53f7\u5219\u660e\u786e\u8868\u793a\u8be5\u51fd\u6570**\u6ca1\u6709\u53c2\u6570**\uff0c\u4e0e<code>void</code>\u542b\u4e49\u76f8\u540c\u3002<code>int func();</code>\u548c<code>int func(void);</code>\u662f\u4e00\u6837\u7684\u3002</li> </ol> </li> <li>\u548cC\u4e2d\u4e00\u6837\uff0c\u56e0\u4e3a\u7f16\u8bd1\u5668\u662f\u4ece\u4e0a\u5230\u4e0b\u904d\u5386\u4ee3\u7801\u7684\uff0c\u6240\u4ee5\u5982\u679c\u8f85\u52a9\u51fd\u6570\u5199\u5728main\u51fd\u6570\u540e\u9762\uff0c\u5728main\u4e2d\u8c03\u7528\u8f85\u52a9\u51fd\u6570\u65f6\u4f1a\u62a5\u9519\u3002\u9700\u8981\u5148\u5728\u6700\u524d\u9762\u52a0\u4e00\u884c\u51fd\u6570\u539f\u578b(function prototype)\u3002\uff08\u5728Java\u548cPython\u4e2d\u4e0d\u9700\u8981\u8fd9\u6837\uff09*<ul> <li>[?] \u5f53\u51fd\u6570\u539f\u578b\u548c\u51fd\u6570\u5b9a\u4e49\u5206\u5f00\u65f6\u5904\u7406\u9ed8\u8ba4\u53c2\u6570\uff1a</li> <li>\u524d\u9762\u7684\u51fd\u6570\u539f\u578b<code>void func(int n = 2);</code></li> <li>\u540e\u9762\u7684\u51fd\u6570\u5b9a\u4e49<code>void func(int n) {...}</code></li> </ul> </li> <li><code>value semantics</code>\u548c<code>reference semantics</code>\u3002\u540c\u6837\u7528swap\u6765\u8bb2\u89e3\u3002\uff08\u4e00\u4e9b\u8bed\u8a00\u4f1a\u6839\u636e\u6570\u636e\u7c7b\u578b\u51b3\u5b9a\u4f7f\u7528\u54ea\u79cd\u8bed\u4e49\uff0c\u5982\u679c\u662f\u57fa\u672c\u6570\u636e\u7c7b\u578b\u6bd4\u5982int\uff0c\u5219\u4f1a\u6309\u503c\u4f20\u9012\uff1b\u5982\u679c\u662f\u5bf9\u8c61\u6216\u6570\u7ec4\uff0c\u5219\u4f1a\u6309\u5f15\u7528\u4f20\u9012\u3002\uff09\u4f46\u5728C++\u4e2d\u53ef\u4ee5\u9009\u62e9\u81ea\u5df1\u60f3\u8981\u7684\u8bed\u4e49\u3002<code>void swap(int a, int b)</code>\u662f\u6309\u503c\u4f20\u9012\uff0c<code>void swap(int&amp; a, int&amp; b)</code>\u662f\u6309\u5f15\u7528\u4f20\u9012\u3002</li> <li>\u5f15\u7528\u53c2\u6570\u7684\u5229\u5f0a<ul> <li>\u901a\u8fc7\u5f15\u7528\u53c2\u6570\uff0c\u53ef\u4ee5\u201creturn\u201d\u591a\u4e2a\u503c\u3002\u4e00\u6b21\u201c\u8fd4\u56de\u201d\u4e24\u4e2a\u503c\u7684\u4f8b\u5b50\uff1a     </li> <li>\u7528\u4e8e\u5bf9\u8c61\u65f6\u53ef\u4ee5\u907f\u514d\u5927\u91cf\u7684\u62f7\u8d1d</li> <li>\u4f46\u4ee3\u7801\u53d8\u5f97\u96be\u4ee5\u7406\u89e3\uff0c\u5f53\u8c03\u7528<code>func(a, b)</code>\u65f6\uff0c\u5982\u679c\u4e0d\u770bfunc\u51fd\u6570\u5b9e\u73b0\u5e76\u4e0d\u80fd\u77e5\u9053a\u548cb\u662f\u6309\u4f55\u79cd\u65b9\u5f0f\u4f20\u9012\uff0c\u662f\u5426\u80fd\u88ab\u4fee\u6539\u3002</li> <li>\u5b57\u9762\u503c(\u5982123\uff0c\"abc\")\u53ef\u4ee5\u4f5c\u4e3a\u503c\u53c2\u6570\u4f20\u9012\uff0c\u4f46\u4e0d\u80fd\u4f5c\u4e3a\u5f15\u7528\u53c2\u6570\u4f20\u9012\u3002\u53ea\u80fd\u5c06\u53d8\u91cf\u4f5c\u4e3a\u5f15\u7528\u53c2\u6570\uff0c\u56e0\u4e3a\u5b9e\u9645\u4f20\u5165\u7684\u5f15\u7528\u662f\u53d8\u91cf\u5728\u5185\u5b58\u4e2d\u7684\u5730\u5740\u3002<ul> <li>\u5982<code>void func(int a)</code>\uff0c\u8c03\u7528\u65f6\u53ef\u4ee5func(123)\uff1b</li> <li>\u4f46<code>void func(int&amp; a);</code>\uff0c<sub>~func(123)</sub>~\u662f\u4e0d\u5408\u6cd5\u7684\u3002\u6b63\u786e\u8c03\u7528\u5e94\u5148\u5c06\u6574\u6570\u5b58\u8fdb\u53d8\u91cf\u4e2d<code>int n = 123;</code>\uff0c\u518d\u5c06\u53d8\u91cf\u4f5c\u4e3a\u51fd\u6570\u53c2\u6570\u4f20\u9012<code>func(n)</code></li> </ul> </li> <li>\u4f8b\u5b50\uff1a\u4e0a\u8ff0\u56fe\u7247\u4e2d\u7684<code>void datingRange(int age, int&amp; min, int&amp; max)</code>\u3002age\u662f\u503c\u8bed\u4e49\uff0c\u8c03\u7528\u65f6\u53ef\u4ee5\u76f4\u63a5\u7528\"48\"<code>datingRange(48, young, old)</code>\uff0c\u4e5f\u53ef\u4ee5\u5148<code>int a = 48</code>\uff0c\u518d\u5c06\u53d8\u91cfa\u4f20\u5165<code>datingRange(a, young, old)</code>\uff1b\u4f46min\u548cmax\u662f\u5f15\u7528\u8bed\u4e49\uff0c\u5fc5\u987b\u5c06\u53d8\u91cf\u4f5c\u4e3a\u53c2\u6570\uff0c~~datingRange(48, 0, 0)~~\u8c03\u7528\u662f\u4e0d\u5408\u6cd5\u7684\u3002</li> </ul> </li> <li>\u8bfe\u7a0b\u7ed3\u675f\u524d\u7684\u6700\u540e\u4e00\u4e2a\u4f8b\u5b50\uff0c\u8ba1\u7b97\u65b9\u7a0b\u7684\u6839\uff08\u5047\u8bbe\u6709\u4e24\u4e2a\u6839\uff09<ul> <li>[?] \u8bf7\u601d\u8003\u51fd\u6570\u7684\u8fd4\u56de\u503c\u3001\u51fd\u6570\u5e94\u8be5\u63a5\u53d7\u7684\u53c2\u6570\u3001\u4ee5\u53ca\u53c2\u6570\u662f\u6309\u503c\u8fd8\u662f\u6309\u5f15\u7528\u4f20\u9012</li> <li> 3\u4e2a\u6309\u503c\u4f20\u9012\u7684\u53c2\u6570a\u3001b\u3001c\uff0c\u4e24\u4e2a\u6309\u5f15\u7528\u4f20\u9012\u7684\u53c2\u6570x1\u3001x2\uff08\u901a\u8fc7\u5f15\u7528\u4f20\u9012\u4e00\u6b21\u201c\u8fd4\u56de\u201d\u4e24\u4e2a\u503c\uff09\uff0c\u51fd\u6570\u4e0d\u9700\u8981\u8fd4\u56de\u503c<code>void</code>\u3002</li> <li></li> </ul> </li> </ul>"},{"location":"lec2_functions/#_2","title":"\u6309\u5f15\u7528\u4f20\u9012","text":""},{"location":"lec2_functions/#1-consttypevoid-funcint-a","title":"1. \u975econst\u5de6\u503c\u5f15\u7528\uff08Type&amp;\uff09\uff1a<code>void func(int&amp; a) {...}</code>","text":"<p>\u975e\u00a0<code>const</code>\u00a0\u5f15\u7528\u53ea\u80fd\u7ed1\u5b9a\u5230\u5de6\u503c\uff08lvalue\uff09\uff0c\u4e0d\u80fd\u7ed1\u5b9a\u5230\u53f3\u503c\uff08rvalue\uff09\u3002\u5de6\u503c\u662f\u6307\u6709\u660e\u786e\u5b58\u50a8\u5730\u5740\u3001\u53ef\u4ee5\u53d6\u5730\u5740\u7684\u8868\u8fbe\u5f0f\uff0c\u901a\u5e38\u662f**\u53d8\u91cf**\uff1b\u53f3\u503c\u662f\u6307\u4e34\u65f6\u5bf9\u8c61\u3001**\u5b57\u9762\u91cf**\u7b49\uff0c\u6ca1\u6709\u660e\u786e\u7684\u5b58\u50a8\u5730\u5740\uff0c\u4e0d\u80fd\u53d6\u5730\u5740\u3002 <pre><code>void func(int&amp; a) {...} // \u6b64\u65f6\u8c03\u7528`func(3)`\u662f\u975e\u6cd5\u7684\u3002\n</code></pre></p> <p>\u56e0\u4e3a\u975e\u00a0<code>const</code>\u00a0\u5de6\u503c\u5f15\u7528\u610f\u5473\u7740\u53ef\u4ee5\u901a\u8fc7\u8be5\u5f15\u7528\u4fee\u6539\u6240\u7ed1\u5b9a\u7684\u5bf9\u8c61\uff0c\u800c\u53f3\u503c\uff08\u5b57\u9762\u91cf\u00a0<code>3</code>\uff09\u662f\u4e34\u65f6\u7684\uff0c\u4e0d\u5141\u8bb8\u88ab\u4fee\u6539\uff0c\u6240\u4ee5\u975e\u00a0<code>const</code>\u00a0\u5de6\u503c\u5f15\u7528\u4e0d\u80fd\u7ed1\u5b9a\u5230\u53f3\u503c\u3002</p>"},{"location":"lec2_functions/#2-constconst-typevoid-funcconst-int-a","title":"2. const\u5f15\u7528\uff08const Type&amp;\uff09\uff1a<code>void func(const int&amp; a) {...}</code>","text":"<p><code>const</code>\u00a0\u5f15\u7528\u65e2\u53ef\u4ee5\u7ed1\u5b9a\u5230\u5de6\u503c\uff0c\u4e5f\u53ef\u4ee5\u7ed1\u5b9a\u5230\u53f3\u503c\u3002\u5f53\u7ed1\u5b9a\u5230\u53f3\u503c\u65f6\uff0c\u4f1a\u521b\u5efa\u4e00\u4e2a\u4e34\u65f6\u5bf9\u8c61\uff0c\u5e76\u5c06\u8be5\u4e34\u65f6\u5bf9\u8c61\u7684\u5f15\u7528\u7ed1\u5b9a\u5230\u00a0<code>const</code>\u00a0\u5f15\u7528\u53c2\u6570\u4e0a\u3002</p> <pre><code>void func(const int&amp; a) {...} // \u6b64\u65f6\u8c03\u7528`func(3)`\u662f\u5408\u6cd5\u7684  \n</code></pre> <p>\u56e0\u4e3a\u00a0<code>const</code>\u00a0\u4fee\u9970\u8868\u660e\u4e0d\u4f1a\u901a\u8fc7\u8be5\u5f15\u7528\u53bb\u4fee\u6539\u6240\u7ed1\u5b9a\u7684\u5bf9\u8c61\uff0c\u6240\u4ee5\u5141\u8bb8\u5b83\u7ed1\u5b9a\u5230\u53f3\u503c\u3002\u5f53\u628a\u4e00\u4e2a\u53f3\u503c\uff08\u5982\u00a0<code>3</code>\uff09\u4f20\u9012\u7ed9\u00a0<code>const</code>\u00a0\u5de6\u503c\u5f15\u7528\u65f6\uff0c\u7f16\u8bd1\u5668\u4f1a\u521b\u5efa\u4e00\u4e2a\u4e34\u65f6\u5bf9\u8c61\uff0c\u5c06\u53f3\u503c\u5b58\u50a8\u5728\u8fd9\u4e2a\u4e34\u65f6\u5bf9\u8c61\u4e2d\uff0c\u7136\u540e\u8ba9\u00a0<code>const</code>\u00a0\u5de6\u503c\u5f15\u7528\u7ed1\u5b9a\u5230\u8fd9\u4e2a\u4e34\u65f6\u5bf9\u8c61\u4e0a\u3002</p>"},{"location":"lec3_strings/","title":"Lec3_Strings","text":"<p>\ud83d\udcbblec3\u8bfe\u5802\u7ec3\u4e60\uff1a</p> <ul> <li> 1. streamErrors \u4e0d\u559c\u6b22\u5199\u6587\u4ef6\u6d41\u7684\u9898\uff0c\u4e0d\u5199\u4e86</li> </ul>"},{"location":"lec3_strings/#string","title":"string","text":"<ul> <li><code>#include &lt;string&gt;</code></li> <li><code>using namespace std; // std::string</code></li> <li>\u5b57\u7b26\u4e32\u7684\u8fde\u63a5<code>+</code>\uff1as1 + s2</li> <li>\u5b57\u7b26\u4e32\u53ef\u4ee5\u901a\u8fc7<code>&gt;</code>\u548c<code>&lt;</code>\u8fdb\u884c\u6bd4\u8f83\uff0c\u57fa\u4e8eASCII\u7801\u7684\u5927\u5c0f\uff08\u5927\u5199\u5b57\u6bcd\u7684ASCII\u7801\u6bd4\u5c0f\u5199\u5b57\u6bcd\u7684\u8981\u5c0f\uff09</li> <li> <p>\u4e0eC\u4e0d\u540c\uff0c\u5728C++\u4e2d\u53ef\u4ee5\u76f4\u63a5\u901a\u8fc7\u201c==\u201d\u6bd4\u8f83\u4e24\u4e2a\u5b57\u7b26\u4e32\u76f8\u7b49\uff0c\u5982<code>if (s == \"abc\") {...}</code>\u3002\u539f\u56e0\u662fC++\u7684\u8bed\u8a00\u7279\u6027\uff1a\u64cd\u4f5c\u7b26\u91cd\u8f7d\u3002\u91cd\u65b0\u5b9a\u4e49\u64cd\u4f5c\u7b26\uff0c\u4ee5\u8ba9\u4ed6\u4eec\u5904\u7406\u4e0d\u540c\u7684\u6570\u636e\u7c7b\u578b</p> </li> <li> <p>\u4e0b\u9762\u662fstring\u7684\u4e00\u4e9b\u6210\u5458\u51fd\u6570\u3002 </p> </li> <li>\u6539\u53d8\u5b57\u7b26\u4e32\uff08\u76f4\u63a5\u5728\u539f\u6765\u7684\u5b57\u7b26\u4e32\u4e0a\u4fee\u6539\u800c\u4e0d\u662f\u8fd4\u56de\u4e00\u4e2a\u65b0\u7684string<ul> <li>string s1 = \"que\"</li> <li>s1.append(\"ue\"); // \"queue\"</li> <li>s1.erase(3, 2) // \u5220\u9664\u4e0b\u6807 3 \u5f00\u59cb\u7684 2 \u4e2a\u5b57\u7b26</li> </ul> </li> <li>\u5b57\u7b26\u4e32\u957f\u5ea6<code>s.length()</code>\u6216<code>s.size()</code><ul> <li>\u6807\u51c6\u5e93\u5b9e\u73b0\u5728<code>std::string</code> \u5185\u90e8\u7ef4\u62a4\u4e00\u4e2a\u6210\u5458\u53d8\u91cf\u6765\u8bb0\u5f55\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\uff0c\u6bcf\u6b21\u8c03\u7528 <code>length()</code> \u65f6\u53ea\u9700\u8fd4\u56de\u8fd9\u4e2a\u5df2\u4fdd\u5b58\u7684\u503c\uff0c\u4e0d\u9700\u8981\u904d\u5386\u6574\u4e2a\u5b57\u7b26\u4e32\u3002\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a$O(1)$\u3002\u591a\u6b21\u8c03\u7528\u4e5f\u51e0\u4e4e\u6ca1\u6709\u989d\u5916\u5f00\u9500\u3002</li> <li>[!] \u8fd9\u4e0eC\u4e2d\u5e38\u7528\u7684<code>string.h</code>\u5e93\u4e2d\u7684<code>strlen()</code>\u4e0d\u540c\uff0c<code>strlen()</code> \u5fc5\u987b\u904d\u5386\u5b57\u7b26\u6570\u7ec4\uff0c\u67e5\u627e\u7ec8\u6b62\u7684 <code>\\0</code> \u6765\u8ba1\u7b97\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a$O(n)$\u3002\u5982\u679c\u5728\u5faa\u73af\u4e2d\u9891\u7e41\u8c03\u7528\u53ef\u80fd\u4f1a\u5e26\u6765\u8f83\u9ad8\u7684\u5f00\u9500\u3002</li> </ul> </li> <li> <p>find()\u548crfind()</p> <ul> <li><code>s1.find(str)</code> s1\u4e2d\u662f\u5426\u5b58\u5728\u5b50\u4e32str\u3002</li> <li>\u5f53\u8fd4\u56de<code>string::npos</code>(no position)\u65f6\u8868\u793a\u672a\u627e\u5230\u3002\u6761\u4ef6\u5224\u65ad\uff1a<code>if (s.find(target) != std::string::npos)</code></li> </ul> </li> <li> <p>\u65af\u5766\u798f\u5e93\u7684\u989d\u5916\u65b9\u6cd5`#include \"strlib.h\"</p> </li> </ul> <p> \u2191\u6ce8\u610f\u8fd9\u4e9b\u4e0d\u80fd\u7528\u70b9\u7b26\u53f7\uff0c\u800c\u662f\u9700\u8981\u628aString\u5bf9\u8c61\u4f5c\u4e3a\u53c2\u6570\u4f20\u5165\u51fd\u6570 - <code>cin</code>\u4e00\u6b21\u6027\u53ea\u80fd\u8bfb\u4e00\u4e2a\u5355\u8bcd\uff0c\u6bd4\u5982 <pre><code>string name;\ncin &gt;&gt; name; // \u8f93\u5165\uff1aDavid Malan\ncout &lt;&lt; \"Hello, \" &lt;&lt; name &lt;&lt; endl; // \u8f93\u51fa\uff1aHello, David\n</code></pre> \u5982\u679c\u5e0c\u671b\u8bfb\u4e00\u6574\u884c\u8f93\u5165\uff0c\u53ef\u4ee5\u8c03\u7528\u65af\u5766\u798f\u5e93\"strlib.h\"\u4e2d\u7684getLine()\u51fd\u6570\uff1a <pre><code>string name = getLine(\"What's your name? \"); // \u8f93\u5165\uff1aDavid Malan\ncout &lt;&lt; \"Hello, \" &lt;&lt; name &lt;&lt; endl; // \u8f93\u51fa\uff1aHello, David Malan\n</code></pre> C++\u6807\u51c6\u5e93\u4e2d\u8fd8\u6709\u4e00\u4e2a\u5f88\u76f8\u4f3c\u7684\u51fd\u6570<code>getline()</code>\uff1a <pre><code>string name;\ncout &lt;&lt; \"What's your name? \";\ngetline(cin, name); // \u8f93\u5165\uff1aDavid Malan\ncout &lt;&lt; \"Hello, \" &lt;&lt; name &lt;&lt; endl; // \u8f93\u51fa\uff1aHello, David Malan\n</code></pre> \u5b83\u63a5\u53d7\u4e24\u4e2a\u53c2\u6570\uff1a\u4ece\u54ea\u8bfb\u53d6\u3001\u5b58\u5230\u54ea\u53bb\u3002\u6ca1\u6709\u8fd4\u56de\u503c\uff08\u8bf4\u660ename\u662f\u4f5c\u4e3a\u5f15\u7528\u53c2\u6570\u4f20\u9012\u7684\uff09 - nameDiamond - C string \u548c C++ String     - C\u4e2d\u7684string\u662f\u5b57\u7b26\u6570\u7ec4<code>char*</code>\uff0c\u6ca1\u6709C++ String\u4e2d\u7684\u6210\u5458\u51fd\u6570\u53ef\u4ee5\u4f7f\u7528     - \u5f53\u5728\u7a0b\u5e8f\u4e2d\u76f4\u63a5\u5199\"Hello\", \"world\"\u65f6\uff0c\u662fC String     - \u5f53<code>string s = \"Hello\";</code>\u65f6\uff0c\u4f1a\u8f6c\u5316\u4e3aC++ String     - \u4e00\u4e2a\u5bb9\u6613\u51fa\u9519\u7684\u4f8b\u5b50\uff1a<code>string s = \"Hello \" + \"world\";</code>     - \u53f3\u8fb9\"Hello \"\u548c\"world\"\u90fd\u662fC String\uff0c\u5e76\u4e0d\u80fd\u50cfC++ String\u4e00\u6837\u901a\u8fc7\"+\"\u76f4\u63a5\u8fde\u63a5\u3002\u4e0d\u8fc7\u7f16\u8bd1\u5668\u4e5f\u4e0d\u4f1a\u62a5\u9519\uff0c\u5b9e\u9645\u4f1a\u8fdb\u884c\u6307\u9488\u8fd0\u7b97\uff0c\u8ba9\u4e24\u4e2a\u5730\u5740\u76f8\u52a0\u540e\u8d4b\u503c\u7ed9\u53d8\u91cfs\uff0c\u5bfc\u81f4\u9884\u671f\u5916\u7684\u5185\u5b58\u64cd\u4f5c\uff0c\u9020\u6210\u7a0b\u5e8f\u5d29\u6e83\u3002     -      - \u53ef\u4ee5\u901a\u8fc7<code>string(\"hi\")</code>\u8f6c\u6362\u4e3aC++ string\uff0c\u4e24\u4e2astring\u4e2d\u53ea\u8981\u6709\u4e00\u4e2astring\u662fC++ string\uff0c\u7528\"+\"\u8fde\u63a5\u65f6\u4f1a\u81ea\u52a8\u8f6c\u6362\u4e3aC++ string</p>"},{"location":"lec3_strings/#_1","title":"\u904d\u5386\u5b57\u7b26\u4e32","text":"<ol> <li><code>[]</code>\u8bbf\u95ee\u4e0b\u6807</li> <li>\u8303\u56f4-based for \u5faa\u73af<code>for (char c : str)</code></li> </ol>"},{"location":"lec3_strings/#_2","title":"\u68c0\u67e5\u5b57\u7b26\u4e32\u662f\u5426\u4e3a\u7a7a","text":"<p><code>if (s.empty()) {...}</code></p>"},{"location":"lec3_strings/#stream","title":"stream","text":"<ol> <li>fstream\u6587\u4ef6\u6d41</li> </ol> <p>ifstream\u8f93\u5165\u6d41\u4ece\u6587\u4ef6\u4e2d\u8bfb\u53d6\u6570\u636e <pre><code>#include &lt;fstream&gt;\n#include &lt;string&gt;\n...\nifstream inFile;\ninFile.open(\"filename.txt\"); // \u4e5f\u53ef\u4ee5ifstream inFile(\"filename.txt\");\nif (!inFile) { // \u68c0\u67e5\u6587\u4ef6\u662f\u5426\u6210\u529f\u6253\u5f00 \n    cerr &lt;&lt; \"\u65e0\u6cd5\u6253\u5f00\u6587\u4ef6\uff01\" &lt;&lt; endl;\n    return 1; \n}\n\nstring line;\nwhile (getline(inFile, line)) { // \u9010\u884c\u8bfb\u53d6\n    cout &lt;&lt; line &lt;&lt; endl;\n}\n\ninFile.close();\n</code></pre> \u4e5f\u53ef\u4ee5\u9010\u4e2a\u5355\u8bcd\u8bfb\u53d6\uff1a <pre><code>string word;\nwhile (inFile &gt;&gt; word) {\n    cout &lt;&lt; word &lt;&lt; endl;\n}\n</code></pre> <code>inFile &gt;&gt; word</code>\u9047\u5230\u7a7a\u683c\u6216\u6362\u884c\u65f6\u4f1a\u505c\u6b62\u3002while\u5faa\u73af\u4e2d\uff0c\u5f53\u6ca1\u6709\u6570\u636e\u53ef\u8bfb\u65f6\uff0c<code>inFile</code>\u4f1a\u53d8\u6210EOF\u72b6\u6001\uff0c\u7ed3\u675f\u5faa\u73af\u3002</p> <ol> <li>sstream\u5b57\u7b26\u4e32\u6d41</li> </ol> <p>**istringstream**\u5c06\u5b57\u7b26\u4e32\u5f53\u4f5c\u8f93\u5165\u6d41\u4ece\u4e2d\u8bfb\u53d6\u6570\u636e\u3002\u5e38\u7528\u4e8e\u89e3\u6790\u5b57\u7b26\u4e32\u4e2d\u7684\u6570\u636e <pre><code>#include &lt;sstream&gt;\n#include &lt;string&gt;\n...\nistringstream input(\"CS50x 2025\");\nstring s;\nint i;\ninput &gt;&gt; s &gt;&gt; i;\ncout &lt;&lt; \"This is \" &lt;&lt; s &lt;&lt; \" \" &lt;&lt; i;\n// This is CS50x 2025\n</code></pre> **ostringstream**\u8f93\u51fa\u6d41\uff0c\u5b83\u5141\u8bb8\u4f60\u5c06\u6570\u636e\u5199\u5165\u5b57\u7b26\u4e32\uff08\u5b9e\u9645\u4e0a\u662f\u4e00\u79cd\u9ad8\u6548\u6784\u5efa\u3001\u7d2f\u8ba1\u5b57\u7b26\u4e32\u7684\u65b9\u5f0f\uff09\uff0c\u800c\u4e0d\u662f\u76f4\u63a5\u5199\u5230\u63a7\u5236\u53f0\u6216\u8005\u6587\u4ef6\u3002\u8fd9\u4f7f\u5f97\u5b83\u975e\u5e38\u9002\u5408\u4e8e\u5b57\u7b26\u4e32\u62fc\u63a5\u3001\u683c\u5f0f\u5316\u6216\u8005\u7f13\u5b58\u6570\u636e\u4ee5\u4fbf\u540e\u7eed\u4f7f\u7528\u3002<code>&lt;&lt;</code>\u8fd0\u7b97\u7b26\u5c06\u6570\u636e\u5199\u5165\u6d41\uff0c\u901a\u8fc7<code>str()</code>\u65b9\u6cd5\u83b7\u53d6\u751f\u6210\u7684\u5b57\u7b26\u4e32\u3002 <pre><code>ostringstream output;\nint year = 2025;\noutput &lt;&lt; \"This is CS50x \" &lt;&lt; year; // \u5c06\u6570\u636e\u5199\u5165\u6d41\nstring s = output.str();\ncout &lt;&lt; s &lt;&lt; endl;\n// This is CS50x 2025\n</code></pre></p> <ol> <li>\u65af\u5766\u798f\u5e93<code>filelib.h</code></li> </ol> <p></p>"},{"location":"lec3_strings/#grid","title":"grid","text":"<p>Quote</p> <p>When a Grid is passed by value, C++ makes a copy of its contents.</p> <p>Copying is slow; you should usually pass by reference with &amp; If the code wont't modify the grid, also pass it as const</p> <p>Like <code>int func(const Grid&lt;int&gt;&amp; g) {...}</code> &amp;\u53ef\u4ee5\u4fdd\u8bc1\u4e0d\u590d\u5236Grid\uff0c\u63d0\u9ad8\u6548\u7387\uff0c\u4f46\u6309\u5f15\u7528\u4f20\u9012\u53ef\u4ee5\u76f4\u63a5\u66f4\u6539Grid\u7684\u5185\u5bb9\uff0c\u5982\u679c\u4e0d\u5e0c\u671bGrid\u88ab\u51fd\u6570\u66f4\u6539\uff0c\u518d\u52a0\u4e0aconst</p> <p><code>Grid&lt;int&gt; matrix(3, 4);</code> </p> <p>\u904d\u5386Grid\uff1a </p>"},{"location":"lec4_vector/","title":"Lec4_Vector","text":"<p>\ud83d\udcbblec4\u7ec3\u4e60\u9898\uff1a</p> <ul> <li> 1. vectorMysteryRemove</li> <li> 2. vectorMysteryInsert</li> <li> 3. countInRange</li> <li>\u524d\u4e09\u9898\u597d\u65e0\u804a</li> <li> 4. removeAll\u6ce8\u610f\u5220\u9664\u5143\u7d20\u8981\u4ece\u540e\u5f00\u59cb\u904d\u5386vector</li> <li> 5. addStars</li> <li> 6. intersect\u53cc\u6307\u9488(\u7d22\u5f15)</li> </ul>"},{"location":"lec4_vector/#5addstars","title":"\u7ec3\u4e60\u98985\uff1aaddStars","text":"<p>\u7ec3\u4e60reserve()\u3001swap() <pre><code>void addStars(vector&lt;string&gt;&amp; v) {\n    int size = v.size() * 2 + 1;\n    for (int i = 0; i &lt; size; i += 2) {\n        v.insert(v.begin() + i, \"*\");\n    }\n}\n</code></pre> insert\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f$O(n)$</p> <pre><code>void addStars(vector&lt;string&gt;&amp; v) {\n    int newSize = v.size() * 2 + 1;\n    vector&lt;string&gt; res;\n    res.reserve(newSize);\n\n    for (int i = 0; i &lt; v.size(); ++i) {\n        res.push_back(\"*\");\n        res.push_back(v[i]);\n    }\n    res.push_back(\"*\");\n\n    v.swap(res);\n}\n</code></pre>"},{"location":"lec4_vector/#vector","title":"Vector","text":"<ul> <li><code>include \"vector.h\"</code></li> <li>\u65af\u5766\u798f\u5e93\u91cc\u7684\u662f<code>Vector</code>\uff0c\u4e0d\u662fC++\u6807\u51c6\u5e93\u91cc\u7684<code>vector</code></li> <li>vector\u5305\u542b\u4e00\u4e2a<code>array</code>\uff0c\u4e00\u4e2a<code>size</code>\uff0c\u4e00\u4e2a<code>capacity</code></li> <li>\u8fd9\u4e00\u8bb2\u5728\u89e3\u91ca\u201c\u4e3a\u4ec0\u4e48<code>Vector&lt;Vector&lt;int&gt; &gt; vv;</code>\u53f3\u8fb9\u591a\u4e86\u4e00\u4e2a\u7a7a\u683c\u201d\u65f6\u975e\u5e38\u597d\u7b11\u54c8\u54c8\u54c8   \u5199\u4e00\u4e2a\u8bfe\u5802\u4ee3\u7801\uff1a <pre><code>// Vector&lt;string&gt; v {\"a\", \"b\", \"b\", \"c\", \"a\", \"b\"};\n// removeAll(v, \"b\")\nvoid removeAll(Vector&lt;string&gt;&amp; v, string s) {\n    for (int i = v.size(); i &gt;= 0; i--) {\n        if (v[i] == s) {\n            v.remove(i);\n        }\n    }\n}\n</code></pre> \u6ce8\u610f\u8fd9\u91cc\u4e3a\u4ec0\u4e48\u8981\u4ece\u672b\u5c3e\u5f00\u59cb\u904d\u5386</li> </ul>"},{"location":"lec4_vector/#big-o","title":"Big-O","text":"<p>\u8fd9\u90e8\u5206\u90fd\u662f\u5728CS50\u5b66\u8fc7\u7684\uff0c\u6ca1\u6709\u65b0\u4e1c\u897f\uff0c\u4e5f\u6ca1\u6709CS50\u8bb2\u5f97\u66f4\u76f4\u89c2\u6613\u61c2 </p>"},{"location":"lec5_stacks_and_queues/","title":"Lec5_Stacks_and_Queues","text":"<p>\ud83d\udcbblec5\u7ec3\u4e60\u9898\uff1a</p> <ul> <li><code>#include \"linkedlist.h\"</code></li> <li>SPL LinkedList</li> <li>\u62bd\u8c61\u6570\u636e\u7c7b\u578bADT\u3002\u4e00\u4e2alist\u7684ADT\u53ef\u4ee5\u6709\u4e0d\u540c\u7684\u5b9e\u73b0\uff0c\u5982vector\u3001linkedlist  </li> </ul>"},{"location":"lec5_stacks_and_queues/#stack","title":"stack","text":"<ul> <li> 1. stackMystery1</li> <li> 2. checkBalance</li> </ul>"},{"location":"lec5_stacks_and_queues/#queue","title":"queue","text":"<ul> <li> 3. stutter</li> <li> 4. mirror \u7ec3\u4e60queue\u7684<code>push, pop, front</code></li> </ul>"},{"location":"lec5_stacks_and_queues/#stacks","title":"Stacks","text":"<p>C++\u6807\u51c6\u5e93\u4e0eSPL\u7684\u4e0d\u540c\uff1a</p> C++\u6807\u51c6\u5e93 SPL \u5934\u6587\u4ef6 <code>#include &lt;stack&gt;</code> <code>#include \"stack.h\"</code> \u58f0\u660e\u4e00\u4e2a\u6808 <code>stack&lt;int&gt; s;</code>(\u7701\u7565\u4e86std::) <code>Stack&lt;int&gt; s;</code>(\u5927\u5199) pop()\u5f39\u51fa\u6808\u9876\u5143\u7d20 <code>pop()</code>\u6ca1\u6709\u8fd4\u56de\u503c <code>pop()</code>\u5f39\u51fa\u6808\u9876\u5143\u7d20\u7684\u540c\u65f6\uff0c\u8fd4\u56de\u6808\u9876\u5143\u7d20\u7684\u503c<code>int top = pop();</code> \u8fd4\u56de\u6808\u9876\u5143\u7d20 <code>top()</code> <code>peek()</code> \u68c0\u67e5\u6808\u662f\u5426\u4e3a\u7a7a <code>empty()</code> <code>isEmpty()</code> <ul> <li><code>include \"stack.h\"</code></li> <li>\u6ce8\u610f\u65af\u5766\u798f\u5e93\u91cc\u662f\u5927\u5199<code>Stack</code></li> <li>push\u3001pop\u3001peek</li> <li>\u5e94\u7528\uff1a\u8ff7\u5bab\u6c42\u89e3\u5668\u3001\u64a4\u9500(undo) </li> <li>\u904d\u5386\u6808\uff08\u904d\u5386\u7ed3\u675f\u540e\u6808\u4e3a\u7a7a\uff09  \u5199\u4e00\u4e2a\u8bfe\u5802\u4ee3\u7801\uff1a checkBalance <pre><code>int checkBalance(string s) {\n    Stack&lt;char&gt; parens;\n    for (int i = 0; i &lt; s.length(); i++) {\n        if (s[i] == '(' || s[i] == '{') {\n            parens.push(s[i]);\n        } else if (s[i] == ')') {\n            if (parens.isEmpty()) {\n                return i;\n            }\n            char top = parens.pop();\n            if (top != '(') {\n                return i;\n            }\n        } else if (s[i] == '}') {\n            if (parens.isEmpty()) {\n                return i;\n            }\n            char top = parens.pop();\n            if (top != '{') {\n                return i;\n            }\n        }\n    }\n\n    if (parens.isEmpty()) {\n        return -1;\n    } else {\n        return s.length();\n    }\n}\n</code></pre> \u8fd9\u4e2a\u3010\u68c0\u67e5\u62ec\u53f7\u662f\u5426\u6b63\u786e\u95ed\u5408\u3011\u7684\u7ec3\u4e60\u5f88\u597d\u5730\u5c55\u793a\u4e86stack\u7684\u4f5c\u7528</li> </ul>"},{"location":"lec5_stacks_and_queues/#queues","title":"Queues","text":"<ul> <li><code>#include \"queue.h\"</code> </li> <li>\u4e00\u822c\u4e0d\u4f1a\u7528array\u6765\u5b9e\u73b0queue\uff08\u56e0\u4e3aarray\u4ecefront\u63d2\u5165\u6216\u79fb\u9664\u5143\u7d20\u90fd\u662f$O(n)$\uff09\u3002\u800c\u662f\u7528linkedlist\uff0c\u4fdd\u8bc1enqueue\u548cdequeue\u64cd\u4f5c\u90fd\u662f$O(1)$</li> <li> <p>\u904d\u5386Queue  \u5199\u4e00\u4e2a\u8bfe\u5802\u7ec3\u4e60<code>mirror</code>\uff1a mirror <pre><code>void mirror(Queue&lt;string&gt;&amp; q) {\n    Stack&lt;string&gt; stack;\n    int size = q.size();\n    for (int i = 0; i &lt; size; i++) {\n        string s = q.dequeue();\n        stack.push(s);\n        q.enqueue(s);\n    }\n\n    while (!stack.isEmpty()) {\n        q.enqueue(stack.pop());\n    }\n}\n</code></pre></p> </li> <li> <p>\u53cc\u5411deque  </p> </li> </ul>"},{"location":"lec6_sets_and_maps/","title":"Lec6_Sets_and_Maps","text":"<p>\ud83d\udcbb\u8bfe\u5802\u7ec3\u4e60\uff1a - [x] 1. setMystery - [x] 2. wordCount - [x] 3. isHappyNumber</p>"},{"location":"lec6_sets_and_maps/#3","title":"\u7ec3\u4e603\uff1a\u5feb\u4e50\u6570","text":"<p>\u5feb\u4e50\u6570\u597d\u8036:)</p> <pre><code>int sumOfSquares(int n) {\n    int sum = 0;\n    while (n != 0) {\n        int digit = n % 10;\n        sum += digit * digit;\n        n /= 10;\n    }\n    return sum;\n}\n\nbool isHappyNumber(int n) {\n    unordered_set&lt;int&gt; seen;\n\n    while (n != 1 &amp;&amp; seen.find(n) == seen.end()) {\n        seen.insert(n);\n        n = sumOfSquares(n);\n    }\n\n    return n == 1;\n}\n</code></pre> <p>[!note] \u529b\u6263\u4e8c\u5237\u65f6\u51fa\u73b0\u7684\u95ee\u9898\uff1a</p> <p>\u8c03\u6362\u4e86\u5728\u96c6\u5408\u4e2dinsert(n)\u4e0e\u66f4\u65b0n\u4e3a\u5e73\u65b9\u548c\u7684\u987a\u5e8f\uff0c\u5bfc\u81f4\u7ed3\u679c\u51fa\u9519\u3002 <pre><code>while (n != 1 &amp;&amp; seen.find(n) == seen.end()) {\n  n = sumOfSquares(n); // \u5148\u66f4\u65b0n\n  seen.insert(n); // \u518d\u5c06\u65b0\u7684n\u52a0\u5165\u96c6\u5408\n}\n</code></pre> \u539f\u56e0\u662f\u6bcf\u6b21\u5faa\u73af\u6211\u4eec\u8981\u5224\u65ad\u66f4\u65b0\u540e\u7684\u5e73\u65b9\u548c\u662f\u5426\u5df2\u7ecf\u51fa\u73b0\u8fc7\uff0c\u5982\u679c\u4e00\u66f4\u65b0\u5c31\u653e\u5165\u96c6\u5408\uff0c\u90a3\u4e0b\u6b21\u65e0\u6cd5\u8fdb\u5165\u5faa\u73af\u3002\u6bd4\u5982\u5224\u65ad19\uff0c\u4f1a\u5148\u8ba1\u7b97$1^2 + 9^2 = 82$\uff0c\u7136\u540e\u5c0682\u653e\u5165\u96c6\u5408\u3002\u4e0b\u6b21\u5faa\u73af\u5224\u65ad82\u662f\u5426\u4e0d\u5728\u96c6\u5408\u4e2d\uff0c\u7b54\u6848\u662ffalse\uff0c\u5faa\u73af\u7ed3\u675f\uff0c\u8fd9\u663e\u7136\u4e0d\u5bf9\u3002</p>"},{"location":"lec6_sets_and_maps/#sets","title":"Sets","text":"<p>Set\u5b58\u50a8\u4e0d\u91cd\u590d\u5143\u7d20</p> <p>  - <code>set.h</code> &amp; <code>hashset.h</code> - \u904d\u5386Set\u7528for-each\u5faa\u73af </p>"},{"location":"lec6_sets_and_maps/#struct","title":"struct","text":"<p>\u5f53\u5c1d\u8bd5\u5728Set\u4e2d\u52a0\u5165\u7528struct\u81ea\u5b9a\u4e49\u7684\u6570\u636e\u7c7b\u578b\u65f6\uff0c\u7f16\u8bd1\u4f1a\u51fa\u9519\uff0c\u56e0\u4e3a\u5411Set\u4e2d\u52a0\u5165\u5143\u7d20\u65f6\u4f1a\u8fdb\u884c\u6392\u5e8f\uff0c\u800c\u7f16\u8bd1\u5668\u5e76\u4e0d\u77e5\u9053\u8be5\u5982\u4f55\u5bf9\u81ea\u5b9a\u4e49\u7684\u6570\u636e\u7c7b\u578b\u6392\u5e8f\u3002\u8fd9\u65f6\u9700\u8981**\u64cd\u4f5c\u7b26\u91cd\u8f7d**</p> <p>  \u5bf9<code>operater &lt;</code>\u8fdb\u884c\u91cd\u8f7d\u540e\uff0c\u53ef\u4ee5\u6bd4\u8f83Date\u7684\u5927\u5c0f</p>"},{"location":"lec6_sets_and_maps/#set","title":"Set\u7ec3\u4e60\uff1a\u7edf\u8ba1\u4e0d\u91cd\u590d\u7684\u5355\u8bcd\u6570","text":""},{"location":"lec6_sets_and_maps/#lexicon","title":"lexicon","text":"<ul> <li>\u76f8\u5f53\u4e8e<code>Set&lt;string&gt;</code></li> <li>lexicon\u6309\u5b57\u5178\u987a\u5e8f\u5b58\u50a8string </li> <li>lexicon\u7531\u524d\u7f00\u6811(Prefix Tree)\u5b9e\u73b0\uff0c\u56e0\u6b64\u6709<code>containsPrefix(\"str\")</code></li> </ul>"},{"location":"lec6_sets_and_maps/#maps","title":"Maps","text":"<ul> <li>\u5b58\u50a8\u952e\u503c\u5bf9(pairs)  </li> </ul>"},{"location":"lec6_sets_and_maps/#1","title":"\u7ec3\u4e601\uff1a\u7edf\u8ba1\u6bcf\u4e2a\u5355\u8bcd\u51fa\u73b0\u7684\u6b21\u6570","text":"<p><pre><code>void wordTally(const string&amp; filename) {\n    cout &lt;&lt; \"Reading\" &lt;&lt; filename &lt;&lt; \" ...\" &lt;&lt; endl;\n    // Todo\n    Map&lt;string, int&gt; counters;\n\n    ifstream input;\n    input.open(filename);\n\n    string word;\n    while (input &gt;&gt; word) {\n        word = toLowerCase(word);\n\n        // Todo\n        if (!counters.containsKey(word)) {\n            counters.put(word, 1);\n        } else {\n            int count = counters.get(word);\n            counters.put(word, count + 1);\n        }\n    }\n\n    while (true) {\n        string word = toLowerCase(trim(getLine(\"Word to search for \")));\n        if (word == \"\") {\n            break;\n        } else {\n            // Todo\n            int count = counters.get(word);\n            cout &lt;&lt; word &lt;&lt; \" occurs \" &lt;&lt; count \"times.\" &lt;&lt; endl;\n        }\n    }\n}\n</code></pre> \u7b2c\u4e8c\u4e2aTodo\u7684if-else\u8bed\u53e5\u53ef\u4ee5\u66ff\u6362\u6210\u7b80\u5355\u7684\u4e00\u53e5<code>counters[word]++</code>\u3002\u56e0\u4e3aSPL\u4e2d\u7684Map\u5728\u7528<code>m.get(key)</code>\u6216\u8005<code>m[key]</code>\u8bbf\u95ee\u4e0d\u5b58\u5728\u7684key\u65f6\uff0c\u4f1a\u8fd4\u56de0\uff08\u56e0\u4e3avalue\u662fint</p>"},{"location":"lec6_sets_and_maps/#2anagrams","title":"\u7ec3\u4e602\uff1aanagrams","text":"<p> <pre><code>int main() {\n    cout &lt;&lt; \"Gathering anagram data ...\" &lt;&lt; endl;\n\n    // Todo\n    Map&lt;string, Set&lt;string&gt;&gt; anagrams;\n\n    ifstream input;\n    input.open(\"scrabble-dictionary.txt\");\n    string word;\n    while (getline(input, word)) {\n        // Todo\n        string sorted = sortLetters(trim(word));\n        anagrams[sorted].add(word);\n    }\n\n    // Repertedly prompt the user for words to look up in the map\n    while (true) {\n        string word = toLowerCase(getLine(\"Type a word [or Enter to quit]: \"));\n        if (word == \"\") {\n            break;\n        } else {\n            // Todo\n            string sorted = sortLetters(word);\n            cout &lt;&lt; anagrams[sorted] &lt;&lt; endl;   \n        }\n    }\n}\n</code></pre></p>"},{"location":"lec7-9_recursion/","title":"Lec7-9_Recursion","text":"<p>\u8bfe\u540eRecursion\u7ec3\u4e60\u9898\uff08CS106X_2017_Section2\uff09 - [x] 1. recursionMysteryComma - [x] 2. reverse\u53cd\u8f6c\u5b57\u7b26\u4e32 - [x] 3. sumOfSquares - [x] 4. stutterStack - [x] 5. countToBy - [x] 6. combin\u8fd9\u4e2a\u7528\u5230\u4e86\u6982\u7387\u8bba\u7684\u77e5\u8bc6\u3002\u7ec3\u4e60\u4e86lec9\u5b66\u5230\u7684memoization - [x] 7. isSubsequence\u5224\u65ad\u662f\u5426\u662f\u5b50\u5e8f\u5217 - [ ] longestCommonSubsequence\u4e0d\u4f1a\u5199 - [ ] editDistance\u4e0d\u60f3\u5199</p> <p>lec7\u7ec3\u4e60\u9898 - [x] 1. recursionMystery648\u7b80\u5355\u7684\u9009\u62e9\u9898 - [x] 2. power\u9012\u5f52\u5b9e\u73b0pow() - [x] 3. isPalindrome\u9012\u5f52\u5224\u65ad\u56de\u6587\u5b57\u7b26\u4e32</p>"},{"location":"lec7-9_recursion/#lec73ispalindrome","title":"lec7\u7ec3\u4e60\u98983\uff1aisPalindrome","text":"<p><pre><code>bool isPalindrome(string s) {\n    s = toLowerCase(s);\n    if (s.size() &lt;= 1) {\n        return true;\n    } else if (s[0] != s[s.size() - 1]) {\n        return false;\n    } else {\n        string s2 = s.substr(1, s.size() - 2);\n        return isPalindrome(s2);\n    }\n}\n</code></pre> \u611f\u89c9\u6211\u5199\u5f97\u602a\u602a\u7684......</p>"},{"location":"lec7-9_recursion/#section26combin","title":"Section2\u7ec3\u4e60\u98986\uff1aCombin","text":"<p>[!note]  \u7ec4\u5408\u6570\uff08Combination\uff09\uff1a\u5728\u6570\u5b66\u4e2d\uff0c\u7ec4\u5408\u6570\u00a0$C(n,k)$\u00a0\u8868\u793a\u4ece\u00a0$n$\u00a0\u4e2a\u4e0d\u540c\u5143\u7d20\u4e2d\u9009\u53d6\u00a0$k$\u00a0\u4e2a\u5143\u7d20\u7684\u65b9\u6848\u6570\uff0c\u4e0d\u8003\u8651\u987a\u5e8f\u3002\u516c\u5f0f\u4e3a\uff1a $$C(n, k) = \\frac{n!}{k! \\cdot (n - k)!}$$</p> <p>\u7ec4\u5408\u6570\u00a0$C(n,k)$\u00a0\u6ee1\u8db3\u4ee5\u4e0b\u9012\u63a8\u5173\u7cfb\uff1a</p> <p>$$C(n, k) = C(n-1, k-1) + C(n-1, k)$$</p> <ul> <li> <p>\u4ece\u00a0nn\u00a0\u4e2a\u5143\u7d20\u4e2d\u9009\u53d6\u00a0kk\u00a0\u4e2a\u5143\u7d20\uff0c\u53ef\u4ee5\u5206\u4e3a\u4e24\u79cd\u60c5\u51b5\uff1a</p> </li> <li> <p>\u5305\u542b\u7b2c $n$ \u4e2a\u5143\u7d20\uff1a\u9700\u8981\u4ece\u5269\u4e0b\u7684\u00a0$n\u22121$\u00a0\u4e2a\u5143\u7d20\u4e2d\u9009\u53d6\u00a0$k\u22121$\u00a0\u4e2a\u5143\u7d20\uff0c\u5373\u00a0$C(n\u22121,k\u22121)$ \u3002</p> </li> <li> <p>\u4e0d\u5305\u542b\u7b2c $n$ \u4e2a\u5143\u7d20\uff1a\u9700\u8981\u4ece\u5269\u4e0b\u7684\u00a0$n\u22121$\u00a0\u4e2a\u5143\u7d20\u4e2d\u9009\u53d6\u00a0$k$\u00a0\u4e2a\u5143\u7d20\uff0c\u5373\u00a0$C(n\u22121,k)$ \u3002</p> </li> <li> <p>\u5c06\u8fd9\u4e24\u79cd\u60c5\u51b5\u7684\u65b9\u6848\u6570\u76f8\u52a0\uff0c\u5c31\u662f\u603b\u7684\u65b9\u6848\u6570\u3002</p> </li> </ul> <p><pre><code>long long combin(int n, int k) {\n    static HashMap&lt;string, long long&gt; m;\n    string key = to_string(n) + \",\" + to_string(k);\n    if (m.containsKey(key)) {\n        return m[key];\n    }\n\n    if (k == 0 || k == n) {\n        return 1;\n    } else if (n &lt; 1 || k &lt; 0 || k &gt; n) {\n        return 0;\n    } else {\n        long long ans = combin(n - 1, k - 1) + combin(n - 1, k);\n        m[key] = ans;\n        return ans;\n    }\n}\n</code></pre> - [!] \u5982\u679c\u4e0d\u7528SPL\u5e93\uff0c\u53ea\u9700\u628aHashMap\u6539\u6210<code>unordered_map</code>\uff0c<code>if (m.containsKey(key))</code>\u6539\u6210<code>if (m.find(key) != m.end()</code>\u5c31\u53ef\u4ee5\u4e86\u3002</p>"},{"location":"lec7-9_recursion/#section27issubsequence","title":"Section2\u7ec3\u4e60\u98987\uff1aisSubsequence","text":"<p><pre><code>bool isSubsequence(string s, string subs) {\n    if (subs.empty()) {\n        return true;\n    }\n    if (s.find(subs[0]) == std::string::npos) {\n        return false;\n    } else {\n        int index = s.find(subs[0]);\n        return isSubsequence(s.substr(index + 1), subs.substr(1));\n    }\n}\n</code></pre> \u611f\u89c9\u81ea\u5df1\u5199\u5f97\u602a\u602a\u7684+1</p> <ul> <li>[!] \u6539\u8fdb\u540e\u7684\u4ee3\u7801\uff1a <pre><code>bool isSubsequence(const string&amp; s, const string&amp; t, int i = 0, int j = 0) {\n    if (j == t.length()) { // \u6216\u8005if(t.empty())\n        return true;\n    }\n    if (i == s.length()) {\n        return false;\n    }\n\n    if (s[i] == t[j]) {\n        return isSubsequence(s, t, i + 1, j + 1);\n    } else {\n        return isSubsequence(s, t, i + 1, j);\n    }\n}\n</code></pre></li> </ul>"},{"location":"lec7-9_recursion/#1printbinary","title":"\u8bfe\u5802\u7ec3\u4e601\uff1aprintBinary","text":"<p>printBinary</p> <p>\u5341\u8fdb\u5236\u8f6c\u5316\u4e3a\u4e8c\u8fdb\u5236\uff1a\u96642\u53d6\u4f59\u6cd5</p> <pre><code>void printBinary(int n) {\n    if (n &lt; 0) {\n        cout &lt;&lt; \"-\";\n        printBinary(-n);\n    } else if (n &lt;= 1) {\n        cout &lt;&lt; n;\n    } else {\n        printBinary(n / 2);\n        cout &lt;&lt; n % 2; // \u4e5f\u53ef\u4ee5printBinary(n % 2)\u4f46\u6211\u4e0d\u60f3\u591a\u8c03\u7528\u4e00\u6b21\n    }\n}\n</code></pre>"},{"location":"lec7-9_recursion/#2reverselines","title":"\u8bfe\u5802\u7ec3\u4e602\uff1areverseLines","text":"<p>reverseLines</p> <pre><code>void reverseLines(ifstream&amp; input) {\n    string line;\n    if (getline(input, line)) {\n        reverselines(input);\n        cout &lt;&lt; line &lt;&lt; endl;\n    }\n}\n</code></pre>"},{"location":"lec7-9_recursion/#3crawl","title":"\u8bfe\u5802\u7ec3\u4e603\uff1acrawl","text":"<p>crawl\u6253\u5370\u6587\u4ef6\u76ee\u5f55</p> <pre><code>#include \"filelib.h\"\nvoid crawl(const string&amp; filename, const string&amp; indentation = \"\");\n\nvoid crawl(const string&amp; filename, const string&amp; indentation) {\n    cout &lt;&lt; indentation &lt;&lt; getTail(filename) &lt;&lt; endl;\n    if (isDirectory(filename)) {\n        // recursive case: directory\n        Vector&lt;string&gt; files = listDirectory(filename);\n        for (string file : files) {\n            crawl(filename + \"/\" + file, indentation + \"    \");\n        }\n    }\n    // else, base case: normal file, do nothing\n}\n</code></pre> <ul> <li>[!] \u5f53\u5b57\u7b26\u4e32\u4f5c\u4e3a\u53c2\u6570\u4f20\u9012\u65f6\uff0c\u5927\u591a\u65f6\u5019<code>const string&amp; s</code>\u66f4\u597d\u3002\uff08\u5982\u679c\u4e0d\u5e0c\u671b\u5b57\u7b26\u4e32\u88ab\u66f4\u6539\u7684\u8bdd\uff09</li> </ul>"},{"location":"lec7-9_recursion/#4fibonacci","title":"\u8bfe\u5802\u7ec3\u4e604\uff1aFibonacci","text":"<p>\u6590\u6ce2\u90a3\u5951\u6570\u52171\u30011\u30012\u30013\u30015\u30018\u300113\u300121\u300134...</p> <pre><code>#include \"hashmap.h\"\n\nint fib(int n) {\n    if (n &lt;= 2) {\n        return 1;\n    } else {\n        return fib(n - 1) + fib(n - 2);\n    }\n}\n</code></pre> <ul> <li>[!] \u8fd9\u79cd\u65b9\u6cd5\u867d\u7136\u53ef\u884c\uff0c\u6548\u7387\u5374\u5f88\u4f4e\uff0c\u6709\u5f88\u591a\u4e0d\u5fc5\u8981\u7684\u8c03\u7528\u3002fib(3)\u5df2\u7ecf\u8ba1\u7b97\u8fc7\u4e86\uff0c\u4f46\u8ba1\u7b97fib(4)\u7684\u65f6\u5019\u8fd8\u4f1a\u518d\u8ba1\u7b97\u4e00\u904dfib(3)\u3001\u8ba1\u7b97fib(5)\u7684\u65f6\u5019\u53c8\u4f1a\u91cd\u590d\u8ba1\u7b97fib(3)\u548cfib(4)......</li> <li>[!] \u6240\u4ee5\u628a\u8ba1\u7b97\u7684\u7ed3\u679c\u7f13\u5b58\u8d77\u6765\uff01\u4e0b\u6b21\u8c03\u7528\u65f6\u76f4\u63a5return\u800c\u4e0d\u662f\u8fdb\u5165\u9012\u5f52\u8ba1\u7b97 </li> </ul>"},{"location":"lec7-9_recursion/#memoization","title":"memoization","text":"<pre><code>int fib(int n) {\n    static HashMap&lt;int, int&gt; cache;\n\n    if (n &lt;= 2) {\n        return 1;\n    } else if (cache.containsKey(n)) {\n        return cache.get[n];\n    } else {\n        int result = fib(n - 1) + fib(n - 2);\n        cache.put(n, result);\n        return result;\n    }\n}\n</code></pre> <p>\u51fd\u6570\u4f53\u5185\u7684static\u53d8\u91cf\uff1a</p> <p>[!note]  \u6211\u4eec\u60f3\u7528\u4e00\u4e2aHashMap\u6765\u7f13\u5b58fib(n)\u7684\u503c\uff0c\u6700\u5f00\u59cb\u662f\u5728\u51fd\u6570\u5916\u58f0\u660e\u4e00\u4e2a\u5168\u5c40\u53d8\u91cf <pre><code>HashMap&lt;int, int&gt; cache;\nint fib(int n) {...}\n</code></pre> \u4f7f\u7528global variable\u662f\u7cdf\u7cd5\u7684\uff01\uff08\u5168\u5c40\u53d8\u91cf\u4f1a\u7834\u574f\u6570\u636e\u7684\u5b89\u5168\u6027\uff09*\u5728C++\u4e2d\uff0c\u53ef\u4ee5\u5728\u51fd\u6570\u4f53\u5185\u58f0\u660e\u4e00\u4e2astatic\u53d8\u91cf\uff0c\u76f8\u5f53\u4e8e\u201c\u51fd\u6570\u7684\u4e13\u5c5eglobal\u53d8\u91cf\u201d\u3002\u8fd9\u6837\uff0c\u4e0d\u4f1a\u5728\u6bcf\u6b21\u8c03\u7528\u51fd\u6570\u65f6\u90fd\u6784\u9020\u4e00\u4e2a\u65b0\u7684HashMap\u5bf9\u8c61\uff0c\u800c\u53ea\u4f1a\u5728\u51fd\u6570\u7b2c\u4e00\u6b21\u8c03\u7528\u65f6\u6784\u9020\u4e00\u6b21\uff0c\u4f46\u4e4b\u540e\u7684\u8c03\u7528\u90fd\u53ef\u4ee5\u4f7f\u7528\u8fd9\u4e2a\u5bf9\u8c61\u3002\u201c\u4ec5\u5bf9\u6b64\u51fd\u6570\u53ef\u89c1\u7684global\u53d8\u91cf\u201d\uff08\u8fd9\u6837\u5f62\u5bb9\u53ea\u662f\u65b9\u4fbf\u7406\u89e3\uff0c\u5e76\u4e0d\u662fglobal\u53d8\u91cf\u554a\uff09*</p>"},{"location":"lec7-9_recursion/#5evaluate","title":"\u8bfe\u5802\u7ec3\u4e605\uff1aevaluate","text":"<p>evaluateMathExpression \u8bb2\u5230\u4e86<code>recursion.h</code>\u4e2d\u7684<code>recursionIndent()</code></p> <pre><code>int evalHelper(const string&amp; exp, int&amp; index) {\n    if (isdigit(exp[index])) {\n        return exp[index++] - '0';\n    } else { // if exp[index] == '('\n        index++;\n        int left = evalHelper(exp, index);\n        int op = exp[index++];\n        int right = evalHelper(exp, index);\n        index++;\n\n        if (op == '+') {\n            return left + right;\n        } else { // op == '*'\n            return left * right;\n        }\n    }\n}\n\nint evaluateMathExpression(const string&amp; exp) {\n    int index = 0;\n    return evalHelper(exp, index);\n}\n</code></pre>"},{"location":"lec7-9_recursion/#6fractals","title":"\u8bfe\u5802\u7ec3\u4e606\uff1afractals","text":"<pre><code>---------------------------\n---------         ---------\n---   ---         ---   ---\n- -   - -         - -   - -\n</code></pre> <p>\u7ed8\u5236\u4e00\u4e2acantorSet(leval 4)\u76f8\u5f53\u4e8e\uff1a 1. \u5148\u7ed8\u5236\u4e00\u6761\u957f\u7ebf 2. \u518d\u5de6\u53f3\u5404\u7ed8\u5236\u4e00\u4e2a\u4f4e\u4e00\u7ea7\u7684cantorSet(leval 3)</p> <p>\u7ed8\u5236\u4e00\u4e2acantorSet(leval 3) \u76f8\u5f53\u4e8e......</p> <pre><code>void cantorSet(GWindow&amp; window, int x, int y, int length, int levels) {\n    if (levels &gt;= 1) {\n        pause(20); // \u53ef\u4ee5\u770b\u5230\u7ed8\u5236\u8fc7\u7a0b\n        window.drawLine(x, y, x + length, y);\n        cantorSet(window, x, y + 20, length / 3, levels - 1); // \u5de6\n        cantorSet(window, x + 2 * length / 3, y + 20, length / 3, levels - 1);\n    }\n}\n</code></pre>"},{"location":"lec7-9_recursion/#7evendigits","title":"\u8bfe\u5802\u7ec3\u4e607\uff1aevenDigits","text":"<p>evenDigits</p> <pre><code>int evenDigits(int n) {\n    if (n == 0) {\n        return 0;\n    } else {\n        int last = n % 10;\n        int ans = evenDigits(n / 10);\n        if (last % 2 == 0) {\n            return ans * 10 + last;\n        } else {\n            return ans;\n        }\n    }\n}\n</code></pre>"}]}